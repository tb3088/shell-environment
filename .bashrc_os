#----- header -----
[ "${0##*/}" != "${BASH_SOURCE##*/}" ] || { >&2 echo -e "ERROR\tfile must be sourced ($0)"; return 2; }

# prevent multiple-inclusion
__link=`readlink -f "$BASH_SOURCE"`
declare -n __tag=SOURCE_${__link//[^a-zA-Z0-9_]/}
[ ${__tag:-0} -eq 0 ] || return 0
#------------------


#NOTE - Mingw/MSYS don't support symlinks! The resulting file has just
# a sigle line in it with the link target, which when sourced'd tries to
# execute the file, which is an error.

: ${OSTYPE:=`uname -o | cut -d _ -f 1 | tr '[:upper:]' '[:lower:]'`}

__tag=1


__uname=`uname`  # alt: uname|sed -E 's/(-[0-9.]+)+$//'
for f in "${BASH_SOURCE/bashrc/functions}" "${BASH_SOURCE}".{$OSTYPE,${__uname%%-*}}; do
  [ -s "$f" ] || continue

  source "$f" || { log.error "RC=$? during $f"; return; }
done

#TODO activate .functions_os first?
#declare -F os.file.replace && alias replace_file='os.file.replace'
#os.detect

#TODO while/do
for fn in os.{ln,sudo,tree}; do
  if is_function $fn; then alias ${fn#os.}=$fn; fi
done    # <( declare -F | awk '$3 ~ /^os/ { print $3 }' )


# vim: expandtab:ts=4:sw=4
