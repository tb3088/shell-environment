# $Id$

declare -A __aws_session=(
    [AccessKeyId]=aws_access_key_id
    [SecretAccessKey]=aws_secret_access_key
    [SessionToken]=aws_session_token
    [Expiration]=aws_session_expire
)

alias aws-clearenv='unset ${!AWS_*}'

function aws-printenv {
  local v
  for v in ${!AWS_*}; do echo "$v=${!v}"; done
}


#function is-aws

#function aws-whoami or aws-metadata ${instance:-self}
#curl -s 'http://169.254.169.254/' && {
#AWS_METADATA_URL='http://169.254.169.254/'
#declare -A ec2_metadata=()
#latest/meta-data/placement/availability-zone
#ami-id
#hostname
#instance-id
#instance-type
#local-ipv4
#public-ipv4


function aws-profile {
  # NOTE 'aws configure get' does NOT follow 'source_profile'
  #  nor fall-thru to 'default' unless profile is ''.

  [ "$1" = 'RESET' ] && { aws-rmPath; unset ${!AWS_*}; return; }
  local v
  for v in AWS_{CONFIG,SHARED_CREDENTIALS}_FILE; do
    if [ -n "${!v}" ]; then
      [ -f "${!v}" ] || { log_ERROR "invalid $v (${!v})"; return; }
    fi
  done

  local profile="$1"; shift
  [ -n "$profile" ] || {
        local list=`awk '$1 ~ /^\[profile/ { sub(/]$/, "", $2); printf(" %s ", $2) }' \
            ${AWS_CONFIG_FILE:-$HOME/.aws/config}`

        read -t 10 -p "Choose profile ($list):  " || return
        [ -n "$REPLY" ] && profile="$REPLY" || return
    }
  [ "$profile" != "$AWS_PROFILE" ] || return 0

  # aws-cli (boto-core?) returns 255 on ProfileNotFound, but will
  # stacktrace on empty values of AWS_PROFILE.

  local _aws_config="${AWS_CONFIG_FILE:+ in ${AWS_CONFIG_FILE/$HOME/\~}}"
  local region
  region=`AWS_CONFIG_FILE=$AWS_CONFIG_FILE aws configure get region --profile "$profile" 2> >(tail -n 1)`
  if [[ $? -eq 255 || "$region" =~ ProfileNotFound ]]; then
    log_ERROR "unknown profile ($profile)$_aws_config"
    return
  fi

  aws-rmPath    # cleanup previous environment

  AWS_PROFILE="$profile"
  aws-addPath
  if [ -n "$AWS_CONFIG_FILE" ]; then
    local _creds="${AWS_CONFIG_FILE%/*}/credentials"
    [ -f "$_creds" ] && : ${AWS_SHARED_CREDENTIALS_FILE:="$_creds"}
  fi

  export ${!AWS_*}
  [ -n "${region}${AWS_DEFAULT_REGION}" ] || log_WARN "property 'region' for profile ($profile)$_aws_config or env:AWS_DEFAULT_REGION is not set"
}

function aws-load_session {
  local format=${FORMAT:-'text'}
  local input="${1:?}"

  [ "${input:0:1}" = '{' ] && format='json' || {
        [ -f "$1" ] && input=(<("$f"))
    }

  case "$format" in
    text)   local header rest
            IFS=$'\t' read -r header AWS_ACCESS_KEY_ID AWS_SESSION_EXPIRE \
                AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN rest <<< "$input"
            ;;
    json)   local key
            local -u value
            [ -n "${DEBUG}" ] && jq -MS .Credentials <<< "$input"
#            for key in "${!__aws_session[@]}"; do
#              value="${__aws_session[$key]}"
#              local -n nref=$value
            for key in `keys __aws_session`; do
              value=`value __aws_session $key`
              local -n nref=$value
              nref=`jq -r .Credentials.$key <<< "$input"`
            done
            [ -n "$VERBOSE" ] && `jq -r .AssumedRoleUser <<< "$input"`
            ;;
    *)      log_ERROR "unsupported format ($format)"
  esac
}

function aws-save_session {
    local field
    local -u key

    for field in "${!__aws_session[@]}"; do
      key="${__aws_session[$field]}"
      ${DEBUG:+ runv} aws configure set "${key,,}" "${!key}"
    done
}

function aws-session {
  # https://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html
# AWS CLI will NOT let you 'get-session-token' if there is a 'role_arn' defined! 

  aws-profile "${AWS_PROFILE:-$1}" || return
  [ "$1" != "$AWS_PROFILE" ] || shift

  local -i token
  if [ -n "$1" ]; then
    [[ "$1" =~ [0-9]{6,} ]] && token=$1 || log_WARN "malformed TOTP token ($1)"
    shift
  fi

  # 'aws configure get' of non-existent key is silent
  local mfa=`aws configure get mfa_serial`
  if [ $? -eq 255 ]; then       # not reached
    log_PANIC "unknown profile ($AWS_PROFILE) ${AWS_CONFIG_FILE:+in $AWS_CONFIG_FILE}"
    return
  fi

  local -ir now=`date '+%s'`
  local -i duration=${AWS_SESSION_DURATION:-3600} write2creds= force=
  local cmd output role

  local OPTIND opt
  while getopts ':cfr:tW' opt 2>/dev/null; do
    case "$opt" in
      c)    which jq &>/dev/null || {
                log_WARN "'jq' not found. skipping option (-$opt) ..."
                continue
            }
            ;;&
      c)    for f in $HOME/.aws/cli/cache/*; do
              [ -f "$f" ] || continue
              expires=$(date --date `jq .Credentials.Expiration < "$f"` '+%s') 2>/dev/null
              [ $now -lt ${expires:-0} ] || { rm "$f"; continue; }

              output=(<("$f"))
              break
            done
            ;;
      f)    force=1 ;;
      r)    role="$OPTARG" ;;
      t)    duration=$OPTARG ;;
      W)    # save session to AWS_SHARED_CREDENTIALS_FILE (potentially DANGEROUS!)
            write2creds=1
            ;;
      :)    RC=2 log_ERROR "missing argument to '-$OPTARG'"; return ;;
      \?)   log_ERROR "invalid option '-$OPTARG'" ;&
      h)    #TODO usage
            return 2
    esac
  done
  shift $((OPTIND-1))

  # 'role-session-name' pattern is [\w+=,.@-]*
  [ -n "${role:=`aws configure get role_arn`}" ] &&
        cmd="assume-role --role-arn $role --role-session-name '${role#:role/}@$AWS_PROFILE-$$'" ||
        cmd='get-session-token'

  if [ -z "$output" -o $force -eq 1 ]; then
    output=$(
        local field
        local -u key
        for field in "${!__aws_session[@]}"; do
          key="${__aws_session[$field]}"
          unset $key
        done

        ${DEBUG:+ runv} aws sts $cmd \
            ${mfa:+ --serial-number $mfa ${token:+ --token-code $token}} \
            ${duration:+ --duration-seconds $duration} \
            --output text
    ) || return
  fi

  aws-load_session "$output"
  [ $write2creds -eq 1 ] && aws-save_session

  [ -z "${VERBOSE}${DEBUG}" ] || aws-printenv
  export ${!AWS_*}
}


function aws-addPath {
  local v f
  local -i delete=${DELETE:-0}

  for v in "$@" ${AWS_CONFIG_FILE:+`dirname "$AWS_CONFIG_FILE"`} \
        `echo ${AWS_PROFILE:+"$HOME"/.{aws,ssh}}`; do
    [ -n "$v" -a -d "$v" ] || continue
    [ "$v" = '.' ] && v=`pwd`

    if [ $delete -eq 1 ]; then
      ${DEBUG:+ runv} rmPath 'PATH' `eval echo "$v"${AWS_PROFILE:+{,/$AWS_PROFILE}}{,/bin}`
    else
      ${DEBUG:+ runv} addPath 'PATH' `eval echo -"$v"${AWS_PROFILE:+{,/$AWS_PROFILE}}{,/bin}`
    fi

    if [ -n "$SSH_AUTH_SOCK" ]; then
      for f in "$v"/{$AWS_PROFILE/,}{id_*,*.pem,*.pub}; do
        [ -f "$f" ] || continue
        ${DEBUG:+ runv} ssh-add ${delete:+ -d} "$f" &>/dev/null
      done

      [ -n "$VERBOSE" ] && { echo; ssh-add -l; }
    fi
  done
}

function aws-rmPath {
  DELETE=1 aws-addPath "$@"
}

function route53-export {
  which jq &>/dev/null || { log_ERROR "'jq' not installed"; return; }
  local zoneid=${1:?}

  grep -qE '([A-Z]|[0-9]){12,}' <<< "$zoneid" ||
        zoneid=$(aws route53 list-hosted-zones --output=json |
            jq -r ".HostedZones[] | select(.Name == \"$1\".) | .Id" |
            cut -d'/' -f3)

  for zone in $zoneid; do
    echo -e "; $zone\n"

    #TODO use printf() with width
    aws route53 list-resource-record-sets --hosted-zone-id=${zone:?} --output=json |
        jq -jr '.ResourceRecordSets[] | "\(.Name) \t\(.TTL) \t\(.Type) \t\(.ResourceRecords[].Value)\n"'
    echo -e "\n"
  done
}

# vim: expandtab:ts=4:sw=2
