#----- header -----
[ "${0##*/}" != "${BASH_SOURCE##*/}" ] || { >&2 echo -e "ERROR\tfile must be sourced ($0)"; return 2; }
#------------------

shopt -s extglob

#ref: https://docs.aws.amazon.com/cli/latest/reference/index.html#cli-aws
__aws_bin=`is_exec -v "aws${AWS_VERSION}"` || return
__aws_api=`"$__aws_bin" --version | awk '{ split($1, terms, "/"); print terms[2]; }'`
#TODO version_compare() w/ sort -g (--version-sort doesn't actually work)
# echo -e '2.3.43\n2.3.7' | sort -t . -k 1,1 -k 2,2 -k 3,3
#ref:   https://github.com/ivan-dyachenko/version
#       https://stackoverflow.com/questions/48491662/comparing-two-version-numbers-in-a-shell-script
#       https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
[[ ${__aws_api} > 2.3.7 ]] || { >&2 echo -e "WARN\t old CLI version"; }


# safety fall-back when neither AWS_DEFAULT_REGION or configuration defaults
declare -Ar __aws_defaults=(
    ['region']='us-east-1'
    ['config']="$HOME/.aws/config"
    ['credentials']="$HOME/.aws/credentials"
    ['readTimeout']=25
    ['connectTimeout']=7
  )

declare -Ar __aws_session=(
    ['AccessKeyId']='aws_access_key_id'
    ['SecretAccessKey']='aws_secret_access_key'
    ['SessionToken']='aws_session_token'
    ['Expiration']='aws_session_expire'
  )

declare -Ar __aws_regex=(
    ['token']='^[0-9]{6}'
    ['role']='^arn:aws:iam::[0-9]{12}:role/'
    ['region']='^[a-z]{2}-[a-z]+-[0-9]'
    ['profile']='^[a-zA-Z]+'
  )

#ref: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
# aws ec2 describe-regions | __JQR '.Regions[].RegionName | sort'
[ ${#__aws_regions[@]} -ge 16 ] ||
declare -ar __aws_regions=(
    ap-northeast-{1,2}
    ap-south-1
    ap-southeast-{1,2}
    ca-central-1
    eu-central-1
    eu-north-1
    eu-west-{1,2,3}
    sa-east-1
    us-east-{1,2}
    us-west-{1,2}
    us-gov-{east,west}-1
  )

#for region in ${__aws_regions[@]}; do
#  __aws_availability_zones[$region]=`aws ec2 describe-availability-zones \
#      --region $region \
#      --query 'AvailabilityZones[].{ Name:ZoneName }' --output text`
#  #alt: ... | JQR '.AvailabilityZones[].ZoneName | @sh'`
#done

[ ${#__aws_availability_zones[@]} -ge 16 ] ||
declare -Ar __aws_availability_zones=(
    ['ap-northeast-1']=`echo ap-northeast-1{a,c,d}`
    ['ap-northeast-2']=`echo ap-northeast-2{a,c}`
    ['ap-south-1']=`echo ap-south-1{a..b}`
    ['ap-southeast-1']=`echo ap-southeast-1{a..c}`
    ['ap-southeast-2']=`echo ap-southeast-2{a..c}`
    ['ca-central-1']=`echo ca-central-1{a..b}`
    ['eu-central-1']=`echo eu-central-1{a..c}`
    ['eu-north-1']=`echo eu-north-1{a..c}`
    ['eu-west-1']=`echo eu-west-1{a..c}`
    ['eu-west-2']=`echo eu-west-2{a..c}`
    ['eu-west-3']=`echo eu-west-3{a..c}`
    ['sa-east-1']=`echo sa-east-1{a,c}`
    ['us-east-1']=`echo us-east-1{a..f}`
    ['us-east-2']=`echo us-east-2{a..c}`
    ['us-west-1']=`echo us-west-1{a,c}`
    ['us-west-2']=`echo us-west-2{a..c}`
    ['us-gov-east-1']=`echo us-gov-east-1{a..c}`
    ['us-gov-west-1']=`echo us-gov-west-1{a..c}`
  )


function __AWS() {
  local cmd=() region=

  # windows binary can't walk symlinks or handle unix'y paths
  if is_windows "${__aws_bin:?}"; then
    [ -n "$AWS_CONFIG_FILE" ] &&
        cmd+=( AWS_CONFIG_FILE=`convert_path -am "$AWS_CONFIG_FILE"` )

    [ -n "$AWS_SHARED_CREDENTIALS_FILE" ] &&
        cmd+=( AWS_SHARED_CREDENTIALS_FILE=`convert_path -am "$AWS_SHARED_CREDENTIALS_FILE"` )

    [[ "$cmd" =~ AWS_ ]] && cmd=( env "${cmd[@]}" )

    # crude search for file arguments since symlinks not supported
    local -a args=( "$@" )
    for ((i=0; i < $#; i++)); do
      [[ "${args[$i]}" =~ file:// ]] && args[$i]=file://`convert_path -am "${args[$i]#file://}"`
    done
    set -- "${args[@]}"
  fi

  cmd+=( "$__aws_bin"
      '--cli-connect-timeout' ${AWS_CONNECT_TIMEOUT:-${__aws_defaults['connectTimeout']}}
      '--cli-read-timeout' ${AWS_READ_TIMEOUT:-${__aws_defaults['readTimeout']}}
    )

  # bail out EC2. WARN! interactive use assumes correctness and may still error
  if [ -z "`eval echo \$AWS{,_DEFAULT}_REGION`" ] && is_ec2; then
    region=`ec2.metadata region || "${cmd[@]}" configure get region ${AWS_PROFILE:+ '--profile' "$AWS_PROFILE"}`

    [ -n "$region" ] && export AWS_DEFAULT_REGION=$region AWS_REGION=$region || {
        log.warn "region unavailable. forcing default (${__aws_defaults['region']})"
        region=${__aws_defaults['region']}
        cmd+=( '--region' "${region:?}" )
      }
  fi

  case "$1" in
    # known N/A
    configure)
            ;;
    # limited support
    ec2)    cmd+=( ${NOOP:+ '--dry-run'} ) ;;&
    s3)     cmd+=( ${NOOP:+ '--dryrun'} ) ;;&

    # API v1 frequently ignores VPC endpoints (NOT exhaustive)
    ec2|sts|dynamodb|sqs|ses|ssm|s3*)
            local endpoint="$1.${region:-$AWS_DEFAULT_REGION}.amazonaws.com"
#TODO? name resolution can be problematic and ping arguments inconsistent
#            ( # DOS missing 'host', Linux missing 'bind-utils'
#              host -s "$endpoint" || nslookup "$endpoint" || ping -n 1 "$endpoint"
#            ) &>/dev/null &&
#                cmd+=( '--endpoint-url' "https://${endpoint}/" ) ||
#                log.debug "name resolution failed ($endpoint)"
            ;;
    *)      # unsupported
  esac

  cmd+=( '--output' json )
  [ "${DEBUG:-0}" -gt 1 -o -n "$TRACE" ] && cmd+=( '--debug' )

  # strip DOS line-endings
  ${DEBUG:+ runv} "${cmd[@]}" "$@" | tr -d $'\r'
}


# approximate clone of program from ec2-utils.rpm
function ec2.metadata() {
  local url='http://169.254.169.254/latest/meta-data'
  local item mac
  local -A mapping=(
      [a]='ami-id'
      [b]='block-device-mapping/'
      [availability-zone]='placement/availability-zone'
      [e]='reservation-id'
      [h]='local-hostname'
      [i]='instance-id'
      [l]='ami-launch-index'
      [m]='ami-manifest-path'
      [o]='local-ipv4'
      [p]='public-hostname'
      [s]='security-groups'
      [t]='instance-type'
      [u]='public-keys'
      [v]='public-ipv4'
    )

  : ${item:=$(echo "$1" | sed -E 's/^-+//')}

  # special/custom cases
  case "$item" in

#-c/--product-codes        Product codes associated with this instance.
#-d/--user-data            User-supplied data.Only available if supplied at instance launch time.
    self)   item='i' ;;
#-k/--kernel-id            The ID of the kernel launched with this instance, if applicable.
#-n/--ancestor-ami-ids     The AMI IDs of any instances that were rebundled to create this AMI.
#-r/--ramdisk-id           The ID of the RAM disk launched with this instance, if applicable.

    _public-keys*)
            item="${item#_}" ;;
    public-keys)
            while read line; do
              while read format; do
                # convert multi-line to single
                $FUNCNAME "_$item/${line%%=*}/$format" | sed ':a;N;s/\n//;ta'
              done < <( $FUNCNAME "_$item/${line%%=*}" )
            done < <( $FUNCNAME "_$item" )
            #TODO selective print by index or by key name
            return
            ;;
    region) $FUNCNAME 'availability-zone' | sed 's/[a-z]$//'; return
            ;;
    subnet?(-id))
            item="network/interfaces/macs/$($FUNCNAME mac)/subnet-id"
            ;;
    type)   item='t' ;;
    vpc?(-id))
            item="network/interfaces/macs/$($FUNCNAME mac)/vpc-id"
            ;;
    z|az)   item='availability-zone' ;;

# Interferes with fall-through
#    *)  [ -n "${mapping[$item]}" ] ||
#            log.error "unsupported format ($format)"; return 2
  esac

  # intermediary items (eg. MACs) leave behind trailing '/'
  __CURL "$url/${mapping[$item]:-$item}" | sed 's|/$||'
}


function is_ec2() { ec2.metadata self &>/dev/null; }


# function aws-kms-crypt (de/en) are simple 1 liner calls to kms-crypt
# -e for encrypt, -d for decrypt. -B to pipe results to base64 -d. must NOT decode (ie. consume the already base64-encoded
# cyphertext as-is for assignment to Bash variables. Pipes, however have no such limitation.
# shamelessly cribbed from https://stackoverflow.com/questions/49537224/how-can-i-call-amazons-aws-kms-decrypt-function-without-using-a-binary-file/53735748#53735748
# remember to whack Gruntwork's retarded 'kmscrypt::' header both forward and backward.
#
# also support -j and auto-detect on 1st char = '{'
# aws kms  decrypt --ciphertext-blob fileb://<(sed -e 's/^kmscrypt:://' post | base64 -d) --query Plaintext --output text
# }

function aws.describe() {
  # returns a series of JSON objects    TODO? optionally wrapped in array (-a)
  local keyword= type field
  local -i single sort_keys
  local -a filter=() query=() cmd=() post=()

  local OPTIND opt
  while getopts ':1at:q:sh' opt; do
    case "$opt" in
      1)    single=1 ;;
      q)    query+=( "$OPTARG" ) ;;
      s)    sort_keys=1 ;;
      t)    filter+=( "$OPTARG" ) ;;

      :)    log.error "missing argument (-$OPTARG)"
            return 2 ;;
      \?|*) log.error "unknown option (-$OPTARG)" ;&
      h)    >&2 echo "Usage: $FUNCNAME ... TODO"
            return 2
    esac
  done
  shift $((OPTIND - 1))

  keyword=${1:?keyword}; shift

#FIXME rewrite all to use --filter syntax and generic ending below
#FIXME post should be JQ terms that join_string -d '|' glues together

  #!! WARN plural supported but beware side-effects !!
  case "$keyword" in
    vpc*)   ;&
    ec2.*)  cmd=( ec2 ) ;;&
    iam.*)  cmd=( iam ) ;;&

    asg|auto?(-)scaling-group?(s))
            cmd=( autoscaling describe-auto-scaling-groups --auto-scaling-group-name "$@" )
            field='AutoScalingGroups'
            ;;

#    iam.user)
#    iam.group?)
#    iam.policy)
    iam.role)
            cmd+=( get-role --role-name "${1:?$keyword}" )
            field='Role'
            ;;
    s3|*bucket)
            #TODO filter
            __AWS s3api list-buckets | __JQ --arg bucket "${1:?bucket}" '.Buckets[] | select(.Name == $bucket)'
            return
            ;;
    *bucket-policy)
            # last JQ used to un-escape embedded stanza (was: | __JQ .)
            __AWS s3api get-bucket-policy --bucket "${1:?bucket}" | __JQ '.Policy | from_json'
            return
            ;;

#    ec2|*instance)
#    instance-role)
#    elastic-ip)
#    internet-gateway
#    nat-gateway

    # https://docs.aws.amazon.com/cli/latest/reference/ec2/describe-tags.html
    ec2.tag?(s))
            type='instance'
            cmd+=( describe-tags )
            ;;&

    eip.tag?(s))
            type='elastic-ip'
            ;;&

    *tag?(s))
            field='Tags'
            function pre_process() {
              __JQ '.[] | { (.ResourceId): { (.Key): (.Value) } }' | __JQ_merge
            }

            #TODO non-EC2 items, but do we really need?
            # sqs: list-queue-tags
            # dynamodb: list-tags-of-resource
            #
            # ec2: customer-gateway | dedicated-host | dhcp-options | elastic-ip | fleet
            #      fpga-image | host-reservation | image | instance | internet-gateway
            #      key-pair | launch-template | natgateway | network-acl | network-interface
            #      placement-group | reserved-instances | route-table | security-group
            #      snapshot | spot-instances-request | subnet | volume | vpc | vpc-endpoint
            #      vpc-endpoint-service | vpc-peering-connection | vpn-connection | vpn-gateway

            : ${type:=${keyword%.tag*}}
            #TODO do all 'type's support filter?
            filter+=(
                "Name=resource-type,Values=${type:?}"
                "Name=resource-id,Values=${1:?resource_id}"
              )
            shift
            # specify tags
            #TODO escape special chars like '[],' also use aws.format_tags()
            [ $# -ge 1 ] && filter+=( Name=key,Values=`string.join -zd ',' "$@"` )

            ;;

#    route)
#    subnet)
    *target-group?(s))
        #FIXME use filter to pick items
            __AWS elbv2 describe-target-groups |
                __JQ --arg tg ${1:?target_group_name} '.TargetGroups[] | select(.TargetGroupName == $tg)'
            return
            ;;

#   ebs|volume) describe-volume
    *volume-attachment)
            __AWS ec2 describe-volumes --volume-ids ${1:?volume_id} | \
                __JQ '.Volumes[].Attachments[0]'
            return
            ;;

    *volume-status)
            #TODO? plural
            __AWS ec2 describe-volume-status --volume-ids ${1:?volume_id} | \
                __JQR '.VolumeStatuses[].VolumeStatus.Status'
            return
            ;;

    vpc?(s))
            cmd+=( describe-vpcs '--vpc-ids' "$@" )
            field='Vpcs'
            ;;

    ec2.vpc-endpoint-service?(s))
            cmd+=( describe-vpc-endpoint-services '--service-name'
                "com.amazonaws.${AWS_DEFAULT_REGION:-${__aws_defaults[region]}}.${1:?service}"
              )
            field='ServiceDetails'
            ;;

    ec2.vpc-endpoint?(s))
            cmd+=( describe-vpc-endpoints '--vpc-endpoint-ids' "$@" )
            field='VpcEndpoints'
            ;;

#    target-group)
#    elb|lb|load-blancer)
#    security-group)
#   launch-config)
#    ssm.parameter?(s))
    *)      log.error "unsupported keyword ($keyword)"
            return 2
  esac

  [ -n "$filter" ] && cmd+=( '--filters' "${filter[@]}" )

  # 'query' strips default context indicated by 'field'
  if [ -n "$query" ]; then
    cmd+=( '--query' "${query[@]}" )
    unset field
  elif grep -q -- '--query' <<< "$*"; then
    unset field
  fi

  # non-trivial JQ operations defined above
  is_function pre_process || function pre_process() { cat; }
  is_function post_process || function post_process() { cat; }

  #NOTE not found  returns '{ <field>: [] }'
  # each pipeline is a sub-shell, hinders short-circuit on-failure

  __AWS "${cmd[@]}" |
      if [ -n "$field" ]; then
        __JQ --arg field "$field" '.[$field] | if length > 0 then . else empty end'
      else cat; fi |

      pre_process |

      if [ ${sort_keys:-0} -eq 1 ]; then __JQ --sort-keys; else cat; fi |
      if [ ${single:-0} -eq 1 ]; then __JQ '.[0]'; else cat; fi |

      post_process
}


# similar to aws.describe() but intended to return singleton values safe for shell consumption, not long-winded JSON
function aws.get() {
  local keyword
  local -a filter=()
  #TODO format with 'a' or 'A' like aws.list and use getopts()

  keyword=${1:?item}; shift

  case "$keyword" in
    *.tag)  aws.describe "$keyword" "$@" |
                __JQR --arg key "${2:?key}" '.[$key]'
            ;;

#    *.tags) aws.describe "$keyword" "${1:?resouce-id}" "${@:2}" |
#             format with 'a' or 'A' like aws.list
#            ;;

    ssm.parameter?(s))
            # mute ParameterNotFound
            if [ $# -eq 1 ]; then
              __AWS ssm get-parameter --with-decryption --name "${1:?parameter}" 2>/dev/null |
                  __JQR '.Parameter.Value'
            else
            # key and value emitted on successive lines to simplify whitespace handling.
            # consume via loop since direct eval() of ^/.+ which is not legal in SHELL.
            # Example:
            #   while read -r key; do read -r value; ... done
            # or
            #   IFS=$'\n' array=( `func` )
              __AWS ssm get-parameters --names "${@:?parameter(s)}" --with-decryption 2>/dev/null |
                  __JQR '.Parameters[] | .Name, .Value'

#TODO return Bash associative array '[key]=value' to minimize caller parsing
#                __JQR '.Parameters[] | "[\(.Name)]=\'\(.Value)\'"'
            fi
            ;;

    sts.account)
            __AWS sts get-caller-identity | __JQR '.Account'
            ;;

    *)      log.error "unsupported keyword ($keyword)"
            return 2
  esac
}

    #target-group.instances - all EC2 instances assigned to a TG
    #lb.instances - ditto for old LB style, detect if new (has TG) and iterate
    #lb.membership - return all LB of which instance is a target. if LB is new (ie. has member TG) iterate thru them
    #tg.membership - for new style

#aws elb describe-load-balancers | __JQR '.LoadBalancerDescriptions[] | select(.Instances[].InstanceId == "<YOUR-INSTANCE-ID>") | . LoadBalancerName '
# or
#aws elb describe-load-balancers --query "LoadBalancerDescriptions[?Instances[?InstanceId=='${instanceId}']].LoadBalancerName"
# but does NOT work with elbv2!!! have to loop thru all known target-groups
#
#    for tg in `aws elbv2 describe-target-groups --query "TargetGroups[?VpcId=='${vpc_id}'].TargetGroupArn" | __JQR '.[]'`; do
#              __AWS elbv2 describe-target-health --target-group-arn "$tg" --query "TargetHealthDescriptions[?Target.Id=='${instance_id}']" | __JQ
#    '.[]' >/dev/null && echo $tg
#
#      #alt: __JQR --arg instance "${instance_id:?}" 'select(.TargetHealthDescriptions[].Target.Id == $instance)'
#      done


# Abstract out incompatible syntax for setting Tags. CURSE you AWS API team, you SUCK!!
function aws.format_tags() {
  local -Ar __printf=(
      ['kv']=     # $key=$value
      ['jKV']=    # compose JSON via eg. jq --null-input --arg K "$k" --arg V "$v" '{ "Key": $k, "Value": $v}'
      ['KkVv']='Key=%s,Value=%s'
      ['jKkVv']=
    )
  local delim= format= keyword=

  local OPTIND opt
  while getopts ':f:h' opt; do
    case "$opt" in
      f)    keyword=$OPTARG; break
            ;;
      :)    log.error "missing argument (-$OPTARG)"
            return 2
            ;;
      \?|*) log.error "unknown option (-$OPTARG)" ;&
      h)    >&2 echo "Usage: $FUNCNAME ... TODO"
            return 2
    esac
  done
  shift $((OPTIND - 1))

  local -a tags=()
  case "{keyword:-ec2}" in
    sqs)    format=${__printf['kv']}; delim=','
        # __JQR '[ to_entries[] | "\(.key)=\(.value)" ] | join(",")'
            ;;
#    ddb|dynamodb)
#            format=${__printf[???]}; delim=X
#            ;;
    #ref: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/create-tags.html
    ec2)    format=${__printf['KkVv']}
            tags=( '--tags' )
            ;;
    *)      log.error "unsupported format ($opt)"
            return
  esac

  # read STDIN (pipe) if no args
  (( $# )) || set -- $( < /dev/stdin )

  local -a kv=()
  local -i json
  while (( $# )); do
    [ -n "$1" ] || { shift; continue; }

    #TODO is_file "$1" detect JSON, or parse k=v
#    if [ -f "$1" ]; then
#       __JQ '.' "$1" &>/dev/null && : ${json:=1} ||
#       set -- $( < "$f" )
#    fi

    if __JQ '.' <<< "$1" &>/dev/null; then
      [ ${json:=1} -eq 1 ] || { log.error "illegal intermixing of (non-)JSON" "$1"; return; }

      tags=( '--cli-input-json' "$1" )  #XXX need re-encoding with to_json or @sh?
      #TODO
      IFS=$'\n' echo "${tags[*]}"
      return
    fi

    # WARN - does not handle embedded multi-line
    kv=( `sed 's/[=,]/\n/g' <<< "$1"` )     # assumes IFS=$'\n' FIXME?
    if [[ ${kv[0]:-X} =~ [kK]ey$ && ${kv[2]:-X} =~ [vV]alue$ ]]; then
      tags+=( `printf "$format" "${kv[1]}" "${kv[3]}"` )
    elif [ ${#kv[@]} -gt 1 ]; then
      tags+=( `printf "$format" "${kv[0]}" "${kv[1]}"` )
    else
      log.error "unknown format ($1)"; return 2
    fi
    shift
  done

  #TODO escape special chars like '[],' nee Key=\"[Group]\",Value=test or 'Key="[Group]",Value=test'

  echo "${tags[@]}"     # use IFS?
  #alt: declare -p tags | sed -E 's/^declare \-. \+=//'; and consume with eval
  # or read() from multi-line or assign to array
}


# Invoked as single-ton - use external loop, though some items allow cheating via comma-delimited
function aws.set() {
  local -a cmd=()
  local keyword=${1:?keyword}; shift

  case "$keyword" in
#    sqs.tag)
#    dynamodb.tag)
#    ec2.tag)
#    *.tag)

    # ref: https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ec2/create-tags.html
    # Usage: item[,item]... <tags>
    ec2.tag?(s))
            [ ${DELETE:-0} -eq 1 ] && cmd=( delete-tags ) || cmd=( create-tags )
            local -a tags=( `aws.format_tags "${@:2}"` )
            __AWS ec2 "${cmd[@]}" --resources ${1//,/ } ${tags:+'--tags'} "${tags[@]}"
            ;;

    ssm.parameter)  #TODO getopt for 'force' 
            #[ "$1" = '-s' ] && { secure=1; shift; }
            #or inspect ${1%%:*} where member of String, List|StringList, Secure|SecureString
            local _type
            [ ${DELETE:-0} -eq 1 ] &&
                cmd=( delete-parameter ) ||
                cmd=( put-parameter '--type' ${_type:-String} '--overwrite' '--value' "$2" )

            __AWS ssm "${cmd[@]}" --name "${1:?key}" >/dev/null
            ;;

    *)      log.error "unsupported keyword ($keyword)"
            return 2
  esac
}


function asg.suspend() {
  __AWS autoscaling enter-standby \
      --auto-scaling-group-name "${1:?ASG_name}" \
      --should-decrement-desired-capacity \
      ${2:+'--instance-ids' "${@:2}"}
}


function asg.resume() {
  __AWS autoscaling exit-standby \
      --auto-scaling-group-name "${1:?ASG_name}" \
      ${2:+'--instance-ids' "${@:2}"}
}


function asg.scale-zero() {
  env min=0 desired=0 asg.set-capacity "$@"
}


function asg.set-capacity() {
  local -i min desired max OPTIND
  local OPTARG opt

  while getopts ':d:m:M:h' opt; do
    case "$opt" in
      d)    desired=$OPTARG ;;
      M)    max=$OPTARG ;;
      m)    min=$OPTARG ;;

      :)    log.error "missing argument (-$OPTARG)"; return 2 ;;
      \?)   log.error "unsupported (-$OPTARG)" ;&
      h|*)  >&2 echo "Usage: $FUNCNAME ... TODO"
            return 2
    esac
  done
  shift $((OPTIND - 1))

  [ -n "${min}${desired}${max}" ] || {
      log.error "none of 'min|max|desired' specified"; return 2
    }

  __AWS autoscaling update-auto-scaling-group \
      --auto-scaling-group-name "${1:?ASG_name}" \
      ${min:+'--min-size' $min} \
      ${desired:+'--desired-capacity' $desired} \
      ${max:+'--max-size' $max} "${@:2}"
}


# wrapper around aws.describe emits 2 columns: <resource id>   ["Tag:Name"] for
# human-friendly display of items and dynamic array assembly
# consume with readarray -t VAR < <(aws.list ...) or IFS=$'\n' ary=( `emit words` ), or
# hsh=( `emit [x]=y ...` )

#TODO really should be aws.get or aws.describe | aws.printf -a/-A <field> [<2nd_field>]
#FIXME this function doesn't actually DO anything yet!!!
function aws.list() {
  local -i sort= OPTIND
  local OPTARG opt format keyword= field=

  while getopts ':aAf:hS' opt; do    # no ^':' so pass args to aws.describe()
    case "$opt" in
      a)    format='array'  ;;
      A)    format='hash'   ;;
      f)    format=$OPTARG  ;;
      S)    sort=1          ;;

      :)    log.error "missing argument (-$OPTARG)"; return ;;
      \?)   log.error "unsupported (-$OPTARG)" ;&
      h|*)  >&2 echo "Usage: $FUNCNAME ... TODO"
            return 2
    esac
  done
  shift $((OPTIND - 1))

  keyword=${1:?keyword}; shift
#FIXME describe() returns ARRAY without '-S' flag
  case "$keyword" in
    autoscaling-group?(s))
            field='AutoScalingGroupName'
            ;;
    vpc?(s)) field='VpcId' ;;

    *)      log.error "unsupported keyword ($keyword)"; return
  esac

#TODO if name=0  cmd[1]=__JQ --arg field "$field" '.[$field], ""'
#TODO if sort=1  can JQ sort?

  # shell-friendly output
  case "${format:-json}" in
    a?(rray)|t?(ext))
            __JQR --arg field "$field" '.[$field]'
            ;;

    # FIXME? if TAB, 'while IFS=$'\t' read -t key val
    # otherwise, read key && read val
    A|hash) __JQR --arg field "$field" '"[\(.[$field])]=\(.Tags | from_entries | .Name | @sh)"'
            ;;

    json)   __JQ --arg field "$field" '{ (.[$field]): (.Tags | from_entries | .Name // "") }' |
                __JQ --slurp 'add'
            ;;
    # not reached
    *)      log.error "unsupported format ($opt)"; return 2
  esac

  #TODO generic execution - $cmd1 | $cmd2 | $cmd3
}


#TODO model after 18f, probes for region, VPC, and instance when invoked with '-P' or '--prompt'
#function ec2.connect() {

function ec2.session() {
  local -i OPTIND lport= rport=
  local OPTARG= opt rhost
  local -a cmd=( __AWS ssm start-session )

  while getopts ':L:h' opt; do
    case "$opt" in
      #ref: https://docs.aws.amazon.com/systems-manager/latest/userguide/session-manager-working-with-sessions-start.html
      L)    # pseudo SSH port-forward spec '[local_port:][remote_host:]remote_port'
            IFS=: read -a words <<< "$OPTARG"
            case ${#words[@]} in
              1)    rport=$words
                    ;;
              2)    rport=${words[1]}
                    # try assignment to detect type
                    lport=$words
                    [ $lport -gt 0 ] || { unset lport; rhost=$words; }
                    ;;
              3)    lport=$words
                    rhost=${words[1]}
                    rport=${words[2]}
                    ;;
              *)    log.error "invalid port-forward spec ('[local_port:][remote_host:]remote_port', $OPTARG)"; return
            esac

            grep -qE 'localhost|127\.+' <<< "$rhost" && unset rhost
            [ $rport -gt 0 ] || { log.error "invalid remote port ($rport)"; return 2; }

            cmd+=( '--document-name' AWS-StartPortForwardingSession${rhost:+SessionToRemoteHost}
                   '--parameters' "`string.join -zd ',' "portNumber=$rport" "localPortNumber=$lport" ${rhost:+"host=$rhost"}`" )
            ;;

      :)    log.error "missing argument (-$OPTARG)"; return ;;
      \?)   log.error "unsupported (-$OPTARG)" ;&
      h|*)  >&2 echo "Usage: $FUNCNAME ... TODO"
            return 2
    esac
  done
  shift $((OPTIND - 1))

  "${cmd[@]}" --target ${1:?InstanceId} "${@:2}"
}


#function s3.restore
#aws s3 ls s3://<bucket_name> | awk '{print $4}' | xargs -L 1 aws s3api restore-object --restore-request Days=<days> --bucket <bucket_name> --key
# or better
# s3cmd restore --recursive s3://mybucketname/

# simple example of qlgrep but need to find my original from AWS
# szcat <file> | grep '^Key=' | sed -e 's|^\([^/]\+/[^/]\+\).*|\1|' | sort | uniq -dc


# vim: expandtab:ts=8:sw=4
