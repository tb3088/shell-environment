#----- header -----
[ "${0##*/}" != "${BASH_SOURCE##*/}" ] || { >&2 echo -e "ERROR\tfile must be sourced ($0)"; return 2; }
#------------------


#NOTE
# Unix-like environments use ':' in PATH, CLASSPATH etc. but
# windows-native binaries like Go, Python require ';' so use addPath()
#
PATHSEP=';'
readonly PATHSEP

# override CYGWIN default which uses non-portable Junctions
function ln() {
  local flag destdir=

  local -i OPTIND; local opt OPTARG
  while getopts ':hHJst:v' opt; do
    case "$opt" in
      H|J)  flag="/$OPTARG" ;;
      s)    unset flag ;;
      t)    is_dir "${destdir:=$OPTARG}" || return ;;
      v)    local VERBOSE=1 ;;

      :)    log.error "missing argument (-$OPTARG)" ;;&
     \?)    log.error "unsupported option (-${OPTARG})" ;&
      h|*)  >&2 cat <<_EOF
      Usage: $FUNCNAME ...
_EOF
            return 2
    esac
  done
  shift $((OPTIND - 1))

  # allows trailing directory like real 'ln' but $# >2 else dangling link
  [ $# -gt 2 ] &&
      if [ -n "$destdir" ]; then
	    :
      elif [ -d "${!#}" ]; then
        destdir=${!#}; set -- "${@:1:$#-1}"
      else
        log.error "ARGC > 2 requires '-t' or directory as last parameter"
        return 2
      fi

  local -r _flag=$flag      # save
  while (( $# )); do
    flag=$_flag             # restore
    local target=$1 link=$2

    [ -d "${target:?}" ] && flag='/D'
    [ -n "$destdir" ] && unset link

    # mklink is retarded. CWD must be `dirname $link`
    ( cd "${destdir:-`dirname "${link:-.}"`}"
      link=$( basename "${link:-$target}" )
      ${DEBUG:+ runv} mklink $flag "$link" "$( cygpath -w "$target" )"
    ) || break
	shift
  done
}
readonly -f ln


#https://www.authlite.com/kb/allow-runas-but-block-interactive-logon
#https://helpdeskgeek.com/free-tools-review/5-windows-alternatives-linux-sudo-command/
is_exec -q sudo ||
function sudo() (
  local who cmd preserve
  local -a flags=()

  local -i OPTIND; local opt OPTARG
  while getopts ':hieEu:X' opt; do
    case "$opt" in
      i)    unset preserve ;;
      e)    cmd=$( VERBOSE=1 is_exec ${EDITOR:-vi} ) || return ;;
      E)    preserve= ;;
      u)    who=$OPTARG ;;
      X)    exec=1 ;;

      :)    log.error "missing argument (-$OPTARG)" ;;&
     \?)    flags+=( "-$OPTARG" ) ;;
      h|*)  >&2 cat <<_EOF
      Usage: $FUNCNAME ...
_EOF
            return 2
    esac
  done
  shift $((OPTIND - 1))

  : ${who:?missing argument \'-u USER\'}
  set -e

  local line
  line=$( getent passwd $who || grep --no-messages "^${who}:" /etc/passwd ) || {
      log.error "unknown USER ($who)"; return; }

  local -a _env=( `awk -F: '{ printf("USER=%s USERNAME=%s HOME=%s UID=%s", $1, $1, $(NF-1), $3) }' <<< "$line"` )
  # preserve certain values regardless
  for e in USERPROFILE ALLUSERSPROFILE TERM; do
    [ -n "${!e}" ] && _env+=( "$e=\'${!e}\'" )
  done

  local shell=${line##*:}
  is_exec "${shell:=$SHELL}"

  ${DEBUG:+ runv} ${exec:+exec} env ${preserve-'-i'} "${_env[@]}" ${cmd:-$shell} "${flags[@]}" "$@"

  #TODO elvated shell:
  # powershell start-process powershell -verb runas
  # powershell -Command "Start-Process cmd -ArgumentList '/K cd /D %CD%' -Verb RunAs"
)
readonly -f sudo


# vim: expandtab:ts=4:sw=4
