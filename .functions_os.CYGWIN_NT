#NOTE
# these Unix-like environments use ':' in PATH, CLASSPATH etc. but
# windows-native binaries like Go, Python require ';' so add entries to
# addPath()
#
#PATHSEP=';'
#readonly PATHSEP

# intercept CYGWIN behavior which is Junctions
function ln() {
  local flag destdir=

  local -i OPTIND; local opt OPTARG
  while getopts ':hJst:' opt; do
    case "$opt" in
      h)    flag='/H' ;;
      J)    flag='/J' ;;
      s)    unset flag ;;
      t)    [ -d "${destdir:=$OPTARG}" ] || {
                log.error "directory not found ($OPTARG)"
                return
              }
            ;;

      :)    log.error "missing argument to '-$OPTARG'"; return 2 ;;
      \?)   #Usage
    esac
  done
  shift $((OPTIND - 1))

  # allows trailing directory like real 'ln' but $# >2 else dangling link
  if [ $# -gt 2 ]; then
    [ -n "$destdir" -o -d "${!#}" ] || {
        log.error "$# > 2 requires '-t' or directory as last parameter"
        return 2
      }

    [ -n "$destdir" ] || { destdir=${!#}; set -- "${@:1:$#-1}"; }
  fi

  local -r _flag=$flag      # save

  while (( $# )); do
    flag=$_flag             # restore
    local target=$1 link=$2

    [ -d "${target:?}" ] && flag='/D'
    [ -n "$destdir" ] && { unset link; shift; } || shift 2

    # mklink is retarded - CWD must be `dirname link`
    ( cd "${destdir:-`dirname $link`}"
      ${DEBUG:+ runv} mklink $flag "$(basename "${link:-$target}")" "$(cygpath -w "$target")"
    )
  done
}


#https://www.authlite.com/kb/allow-runas-but-block-interactive-logon
#https://helpdeskgeek.com/free-tools-review/5-windows-alternatives-linux-sudo-command/
is_exec sudo ||
function sudo() {
  local who cmd line env shell flags preserve=
  #FIXME local -A env
  #FIXME local -a flags and cmd?
  local -i OPTIND
  local opt OPTARG

  while getopts ':ieEu:X' opt 2>/dev/null; do
    case "$opt" in
      i)    initial=1; unset preserve
	    ;;
      e)    cmd=`VERBOSE=1; is_exec ${EDITOR:-vi}` || {
                log.error "invalid EDITOR (${EDITOR:-vi})"
                return
              }
            ;;
      E)    preserve='' ;;
      u)    who=$OPTARG ;;
      X)    exec=1 ;;
      :)    log.error "missing argument to '-$OPTARG'"; return 2 ;;
      \?)   flags+=" -$OPTARG"
    esac
  done
  shift $((OPTIND - 1))

  : ${who:?missing argument \'-u USER\'}
  line=`getent passwd $who || grep --no-messages "^${who}:" /etc/passwd` || {
        log.error "unknown USER ($who)"
        return
    }

  env=`awk -F: '{ printf("USER=%s USERNAME=%s HOME=%s UID=%s", $1, $1, $(NF-1), $3) }' <<< "$line"`
  # preserve certain values regardless
  for e in USERPROFILE ALLUSERSPROFILE TERM; do
    [ -n "${!e}" ] && env+=" $e='${!e}'"
  done

  shell=${line##*:}
  [ -n "${shell:=$SHELL}" -a -x "$shell" ] || {
        log.error "invalid SHELL ($shell)"
        return
    }

  ${DEBUG:+ runv} ${exec:+ exec} env ${preserve- -i} $env ${cmd:-$shell ${initial:+ -l}} $flags "$@"
  #TODO elvated shell:
  # powershell start-process powershell -verb runas
  # powershell -Command "Start-Process cmd -ArgumentList '/K cd /D %CD%' -Verb RunAs"
}
readonly -f sudo


# vim: expandtab:ts=4:sw=4
