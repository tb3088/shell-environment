PATHSEP=';'
readonly PATHSEP

# intercept CYGWIN behavior which is Junctions
function ln() {
  local flag destdir=
  local OPTIND opt

  while getopts ':hjst:' opt; do
    case "$opt" in
      h)    flag='/h' ;;
      j)    flag='/j' ;;
      s)    unset flag ;;
      t)    [ -d "${destdir:=$OPTARG}" ] || {
                log.error "directory not found ($OPTARG)"
                return
              }
            ;;

      :)    log.error "missing argument to '-$OPTARG'"; return 2 ;;
      \?)   #Usage
    esac
  done
  shift $((OPTIND-1))

  # safety check
  [ $# -le 2 -o -n "$destdir" ] || { log.error "more than 2 args requires '-t'"; return 2; }

  if [ -n "$destdir" ]; then
    ( cd "$destdir"
      while (( $# )); do
        ${flag:+ flag="$flag"} $FUNCNAME "$1"
        shift
      done
    )
    return
  fi

  [ -d "${1:?target}" ] && flag='/d'
  local link="${2:-${1##*/}}"

  # mklink is retarded - must be in CWD of link
  ( cd `dirname "$link"`; mklink $flag `basename "$link"` "${1//\//\\}" )
}


is_exec sudo ||
function sudo() {
  local who cmd line env shell flags preserve=
  #FIXME local -A env
  #FIXME local -a flags and cmd?
  local OPTIND opt      # important!!

  while getopts ':ieEu:X' opt 2>/dev/null; do
    case "$opt" in
      i)    initial=1; unset preserve
	    ;;
      e)    cmd=`VERBOSE=1; is_exec ${EDITOR:-vi}` || {
                log.error "invalid EDITOR (${EDITOR:-vi})"
                return
              }
            ;;
      E)    preserve='' ;;
      u)    who=$OPTARG ;;
      X)    exec=1 ;;
      :)    log.error "missing argument to '-$OPTARG'"; return 2 ;;
      \?)   flags+=" -$OPTARG"
    esac
  done
  shift $((OPTIND-1))

  : ${who:?missing argument \'-u USER\'}
  line=`getent passwd $who || \grep -s "^${who}:" /etc/passwd` || {
        log.error "unknown USER ($who)"
        return
    }

  env=`awk -F: '{ printf("USER=%s USERNAME=%s HOME=%s UID=%s", $1, $1, $(NF-1), $3) }' <<< "$line"`
  # preserve certain values regardless
  for e in USERPROFILE ALLUSERSPROFILE TERM; do
    [ -n "${!e}" ] && env+=" $e='${!e}'"
  done

  shell=${line##*:}
  [ -n "${shell:=$SHELL}" -a -x "$shell" ] || {
        log.error "invalid SHELL ($shell)"
        return
    }

  ${DEBUG:+ runv} ${exec:+ exec} env ${preserve- -i} $env ${cmd:-$shell ${initial:+ -l}} $flags "$@"
  #TODO elvated shell:
  # powershell start-process powershell -verb runas
  # powershell -Command "Start-Process cmd -ArgumentList '/K cd /D %CD%' -Verb RunAs"
}
readonly -f sudo


# vim: expandtab:ts=4:sw=4
