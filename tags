!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Sh	a,alias	/aliases/
!_TAG_KIND_DESCRIPTION!Sh	f,function	/functions/
!_TAG_KIND_DESCRIPTION!Sh	h,heredoc	/label for here document/
!_TAG_KIND_DESCRIPTION!Sh	s,script	/script files/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Sh	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/pattonma/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	//
!_TAG_ROLE_DESCRIPTION!Sh!heredoc	endmarker	/end marker/
!_TAG_ROLE_DESCRIPTION!Sh!script	loaded	/loaded/
3rdparty.add_program	.bashrc_3rdparty	/^function 3rdparty.add_program() {$/;"	f
3rdparty.add_program	.bashrc_java	/^function 3rdparty.add_program() {$/;"	f
3rdparty.add_program	.bashrc_mvn	/^function 3rdparty.add_program() {$/;"	f
3rdparty.add_program	.bashrc_npm	/^function 3rdparty.add_program() {$/;"	f
EOF	.bashrc_aws	/^      h|*)  >&2 cat << EOF$/;"	h
EOF	.bashrc_aws	/^      h|*)  >&2 cat <<EOF$/;"	h
EOF	.functions	/^      h|*)  >&2 cat << EOF$/;"	h
EOF	.functions_aws	/^      h|*)  >&2 cat << EOF$/;"	h
EOF	.functions_logging	/^read -rd '' __log_template <<'EOF'$/;"	h
_EOF	.functions	/^      env -i $SHELL --noprofile --norc -s 2>\/dev\/null <<- _EOF$/;"	h
_EOF	.functions	/^      h|*)  >&2 cat << _EOF$/;"	h
_EOF	.functions	/^      h|*)  >&2 cat <<_EOF$/;"	h
_EOF	.functions_os	/^      h|*)  >&2 cat <<_EOF$/;"	h
_EOF	.functions_os.CYGWIN_NT	/^      h|*)  >&2 cat <<_EOF$/;"	h
_EOF	.functions_os.MINGW64_NT	/^      h|*)  >&2 cat <<_EOF$/;"	h
_EOF	.functions_os.cygwin	/^      h|*)  >&2 cat <<_EOF$/;"	h
_EOF	.functions_os.msys	/^      h|*)  >&2 cat <<_EOF$/;"	h
__AWS	.functions_aws	/^function __AWS() {$/;"	f
__CURL	.functions	/^function __CURL() { \\curl --connect-timeout 3 --fail --silent --location ${VERBOSE:+ '--verbose/;"	f
__GIT	.bashrc_devops	/^function __GIT() {$/;"	f
__JQ	.functions	/^function __JQ() { \\jq --exit-status "$@"; }$/;"	f
__JQR	.functions	/^function __JQR() { \\jq "$@" | \\jq --exit-status --raw-output '. \/\/ empty'; }$/;"	f
__JQ_merge	.functions	/^function __JQ_merge() { \\jq --slurp 'reduce .[] as $item ({}; . * $item)'; }$/;"	f
__READLINK	.functions	/^function __READLINK() { \\readlink ${VERBOSE:+ -v} "$@"; }$/;"	f
__WHICH	.functions	/^function __WHICH() { \\which --skip-alias --skip-functions "$@"; }$/;"	f
__compare	.functions	/^  function __compare() {$/;"	f
__continue	.functions	/^function __continue() { [ -n "$CONTINUE" ]; }$/;"	f
__doit	.bashrc_aws	/^  function __doit() ($/;"	f
__is_markup	.functions	/^function __is_markup() {$/;"	f
__is_type	.functions	/^function __is_type() {  #WARN! selective short-circuit on first error$/;"	f
__log_lookup	.functions_logging	/^function __log_lookup() {$/;"	f
__log_print	.functions_logging	/^function __log_print() {$/;"	f
__prompt	.bashrc_prompt	/^function __prompt() {$/;"	f
__prompt.aws	.bashrc_aws	/^function __prompt.aws() {$/;"	f
__prompt.git	.bashrc_devops	/^function __prompt.git() {$/;"	f
addPath	.functions	/^function addPath() {$/;"	f
array.is_member	.functions	/^function array.is_member() ($/;"	f
array.print	.functions	/^function array.print() {$/;"	f
asg.resume	.functions_aws	/^function asg.resume() {$/;"	f
asg.scale-zero	.functions_aws	/^function asg.scale-zero() {$/;"	f
asg.set-capacity	.functions_aws	/^function asg.set-capacity() {$/;"	f
asg.suspend	.functions_aws	/^function asg.suspend() {$/;"	f
aws	.bashrc_aws	/^alias aws.clearenv='aws.profile RESET'$/;"	a
aws	.bashrc_aws	/^alias aws='__AWS'$/;"	a
aws.addPath	.bashrc_aws	/^function aws.addPath() {$/;"	f
aws.creds-load	.bashrc_aws	/^function aws.creds-load() {$/;"	f
aws.creds-save	.bashrc_aws	/^function aws.creds-save() {$/;"	f
aws.describe	.functions_aws	/^function aws.describe() {$/;"	f
aws.format_tags	.functions_aws	/^function aws.format_tags() {$/;"	f
aws.get	.functions_aws	/^function aws.get() {$/;"	f
aws.list	.functions_aws	/^function aws.list() {$/;"	f
aws.printenv	.bashrc_aws	/^function aws.printenv() { local v; for v in ${!AWS_*}; do printf '%s=%q\\n' "$v" "${!v}"; done; /;"	f
aws.profile	.bashrc_aws	/^function aws.profile() {$/;"	f
aws.region	.bashrc_aws	/^function aws.region() {$/;"	f
aws.rmPath	.bashrc_aws	/^function aws.rmPath() { aws.addPath -D "$@"; }$/;"	f
aws.route53-export	.bashrc_aws	/^function aws.route53-export() {$/;"	f
aws.set	.functions_aws	/^function aws.set() {$/;"	f
bool_to_int	.functions	/^function bool_to_int() {$/;"	f
cat	.functions	/^  function cat() { pv -q "$@"; }$/;"	f
cert.print	.functions_devops	/^function cert.print() {$/;"	f
chef-repo	.bashrc_chef	/^alias chef-repo='pushd $REPO_HOME\/chef-repo'$/;"	a
chef.env	.bashrc_chef	/^function chef.env() {$/;"	f
command_not_found_handle	.bashrc_os.CYGWIN_NT	/^    is_exec -q cmd.exe && function command_not_found_handle() { cmd.exe \/D \/C "$@"; }$/;"	f
command_not_found_handle	.bashrc_os.cygwin	/^    is_exec -q cmd.exe && function command_not_found_handle() { cmd.exe \/D \/C "$@"; }$/;"	f
confirm	.functions	/^function confirm() {$/;"	f
convert_path	.functions	/^function convert_path() {$/;"	f
copy_function	.functions	/^function copy_function() {$/;"	f
csv2json	.bashrc_devops	/^function csv2json() {$/;"	f
define	.functions	/^function define() {$/;"	f
detect_os	.functions_os	/^function detect_os() {$/;"	f
docker	.bashrc_devops	/^alias docker.stats='docker ps -q | xargs  docker stats --no-stream'$/;"	a
ec2.connect	.bashrc_aws	/^function ec2.connect() {$/;"	f
ec2.metadata	.functions_aws	/^function ec2.metadata() {$/;"	f
ec2.session	.bashrc_aws	/^function ec2.session() { log.warn "deprecated - use 'ec2.connect()'"; ec2.connect "$@"; }$/;"	f
ec2.session-list	.bashrc_aws	/^function ec2.session-list() {$/;"	f
expand_dvq	.functions	/^function expand_dvq() {$/;"	f
git	.bashrc_devops	/^alias git.render="\\git diff | sed -E 's\/^[+ ]([^+]|$)\/\\1\/; \/^\\-([^\\-]+|$)\/ d'"$/;"	a
git.bulk_add	.bashrc_devops	/^function git.bulk_add() {$/;"	f
git.current	.bashrc_devops	/^function git.current() { __GIT branch | awk '$1 == "*" { print $2; exit; }'; }$/;"	f
git.mirror	.bashrc_devops	/^function git.mirror() {$/;"	f
gsb	.bashrc_devops	/^alias gsb='\\git status --short --branch'$/;"	a
hash.print	.functions	/^function hash.print() { array.print -k "$@"; }$/;"	f
iam.session	.bashrc_aws	/^function iam.session() {$/;"	f
iam.session-load	.bashrc_aws	/^function iam.session-load() {$/;"	f
iam.session-save	.bashrc_aws	/^function iam.session-save() {$/;"	f
iam.sshkeys	.bashrc_aws	/^function iam.sshkeys {$/;"	f
is_	.functions	/^  eval function is_$f '{ __is_type "$@"; }'$/;"	f
is_ec2	.functions_aws	/^function is_ec2() { ec2.metadata self &>\/dev\/null; }$/;"	f
is_interactive	.functions	/^function is_interactive() { [[ $- =~ i ]] || tty -s || [ -n "`tset -q`" ]; }$/;"	f
is_json	.functions	/^function is_json() {$/;"	f
is_lvm	.functions_os.Linux	/^function is_lvm() {$/;"	f
is_lvm	.functions_os.linux-gnu	/^function is_lvm() {$/;"	f
is_number	.functions	/^function is_number() { to_int $1 &>\/dev\/null; }$/;"	f
is_windows	.functions	/^function is_windows() ($/;"	f
is_windows	.functions_os	/^function is_windows() { [[ "${OSTYPE:-`uname -o`}" =~ [cC]ygwin|[mM]sys ]]; }$/;"	f
is_wsl	.functions_os	/^function is_wsl() { uname -r | grep -q WSL; }$/;"	f
is_yaml	.functions	/^function is_yaml() {$/;"	f
join_quote	.functions	/^function join_quote() { log.warn "DEPRECATED! use 'string.join()'"; QUOTE=\\' string.join "$@"; /;"	f
join_string	.functions	/^function join_string() { log.warn "DEPRECATED! use 'string.join()'"; string.join "$@"; }$/;"	f
json2yaml	.bashrc_devops	/^alias json2yaml="python -c 'import sys, yaml, json; yaml.dump(json.load(sys.stdin), sys.stdout, /;"	a
json2yaml	.bashrc_devops	/^alias json2yaml='yq eval -P'$/;"	a
kde	.bashrc_chef	/^alias kde='\\knife data bag edit'$/;"	a
kds	.bashrc_chef	/^alias kds='\\knife data bag show'$/;"	a
keys	.functions	/^function keys() { values "$@"; }$/;"	f
knife	.bashrc_chef	/^	alias knife='\\knife solo'$/;"	a
krf	.bashrc_chef	/^alias krf='\\knife role from file'$/;"	a
ksn	.bashrc_chef	/^alias ksn='\\knife search node'$/;"	a
list_functions	.functions	/^function list_functions() ($/;"	f
ln	.functions_os.CYGWIN_NT	/^function ln() {$/;"	f
ln	.functions_os.MINGW64_NT	/^function ln() {$/;"	f
ln	.functions_os.cygwin	/^function ln() {$/;"	f
ln	.functions_os.msys	/^function ln() {$/;"	f
log	.functions	/^function log() {$/;"	f
log	.functions_logging	/^function log() {$/;"	f
log.debug	.functions	/^function log.debug() {$/;"	f
log.error	.functions	/^function log.error() {$/;"	f
log.info	.functions	/^function log.info() {$/;"	f
log.mask	.functions_logging	/^function log.mask() {$/;"	f
log.none	.functions	/^function log.none() { return; }$/;"	f
log.notice	.functions	/^function log.notice() {$/;"	f
log_	.functions_logging	/^    [0-3])  eval function log_$k "${__log_template\/_exit\/_exit=1}" 2>\/dev\/null$/;"	f
log_	.functions_logging	/^    [4-8])  eval function log_$k "${__log_template}" 2>\/dev\/null$/;"	f
ls	.bashrc_os.Darwin	/^alias ls='\\ls -hAF -G'$/;"	a
max	.functions	/^function max() { min -r "$@"; }$/;"	f
min	.functions	/^function min() {$/;"	f
ops-repo	.bashrc_chef	/^alias ops-repo='pushd $REPO_HOME\/operations'$/;"	a
os.file.replace	.functions_os	/^function os.file.replace() {$/;"	f
os.tree	.functions_os	/^function os.tree() {$/;"	f
package_name	.functions_os	/^function package_name() {$/;"	f
pause	.functions	/^function pause() {$/;"	f
pidof	.bashrc_os.CYGWIN_NT	/^      function pidof() {$/;"	f
pidof	.bashrc_os.Linux	/^function pidof() {$/;"	f
pidof	.bashrc_os.cygwin	/^      function pidof() {$/;"	f
pidof	.bashrc_os.linux-gnu	/^function pidof() {$/;"	f
post_process	.functions_aws	/^  is_function post_process || function post_process() { cat; }$/;"	f
pre_process	.functions_aws	/^            function pre_process() {$/;"	f
pre_process	.functions_aws	/^  is_function pre_process || function pre_process() { cat; }$/;"	f
proc.cache-hit	.functions_os.Linux	/^function proc.cache-hit() {$/;"	f
proc.cache-hit	.functions_os.linux-gnu	/^function proc.cache-hit() {$/;"	f
ps	.bashrc_os.CYGWIN_NT	/^  alias ps='\\procps -e ${PS_ARGS:- -o uid,pid,ppid,stime,etime,cmd}'$/;"	a
ps	.bashrc_os.CYGWIN_NT	/^  alias ps='\\ps -f'$/;"	a
ps	.bashrc_os.MINGW64_NT	/^alias ps='\\ps -f'$/;"	a
ps	.bashrc_os.cygwin	/^  alias ps='\\procps -e ${PS_ARGS:- -o uid,pid,ppid,stime,etime,cmd}'$/;"	a
ps	.bashrc_os.cygwin	/^  alias ps='\\ps -f'$/;"	a
ps	.bashrc_os.msys	/^alias ps='\\ps -f'$/;"	a
readonly	.functions	/^for f in array dir{,ectory} exec{,utable} file hash integer string function readonly nref; do$/;"	f
rename_function	.functions	/^function rename_function() {$/;"	f
rmPath	.functions	/^function rmPath() {$/;"	f
runv	.functions	/^function runv() {$/;"	f
string.contains	.functions	/^function string.contains() {$/;"	f
string.join	.functions	/^function string.join() {$/;"	f
sudo	.functions_os.CYGWIN_NT	/^function sudo() ($/;"	f
sudo	.functions_os.MINGW64_NT	/^function sudo() ($/;"	f
sudo	.functions_os.cygwin	/^function sudo() ($/;"	f
sudo	.functions_os.msys	/^function sudo() ($/;"	f
to_bool	.functions	/^function to_bool() { bool_to_int -r "$1"; }$/;"	f
to_int	.functions	/^function to_int() { printf '%d\\n' "${@:-X}" 2>\/dev\/null; }$/;"	f
to_lower	.functions	/^function to_lower() { if (( $# )); then local IFS=$'\\n'; echo "${*,,}"; else tr '[:upper:]' '[:/;"	f
to_upper	.functions	/^function to_upper() { if (( $# )); then local IFS=$'\\n'; echo "${*^^}"; else tr '[:lower:]' '[:/;"	f
tree	.bashrc_os	/^is_exec -q tree{,.com} || { is_function os.tree && alias tree='os.tree'; }$/;"	a
tsv2json	.bashrc_devops	/^alias tsv2json="DELIM=$'\\t' csv2json"$/;"	a
value	.functions	/^function value() { values "$@" | head -n 1; }$/;"	f
values	.functions	/^function values() {$/;"	f
version_to_int	.functions	/^function version_to_int() ($/;"	f
whereis_function	.functions	/^function whereis_function() ($/;"	f
yaml2json	.bashrc_devops	/^alias yaml2json="python -c 'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.std/;"	a
yaml2json	.bashrc_devops	/^alias yaml2json='yq eval -j'$/;"	a
