[ "${0##*/}" != "${BASH_SOURCE##*/}" ] || { >&2 echo -e "ERROR\tfile must be sourced"; exit 2; }


function is_wsl() { uname -r | grep -q WSL; }

#TODO is_linux, or is_os that can emit solaris, windows, cygwin, etc


#FIXME work-in-progress
return 0

#is_exec rpm apt || { >&2 echo -e "ERROR\tmissing required commands"; return 2; }

function detect_os() {
  #TODO leverage facter2, chef equiv, and distro if available
  #ref: https://github.com/nir0s/distro/blob/master/distro.py#L154

# old, rather brittle way
#if [[ -e /etc/redhat-release ]]; then
#   RELEASE_RPM=$(rpm -qf /etc/redhat-release)
#   RELEASE=$(rpm -q --qf '%{VERSION}' ${RELEASE_RPM})
#   case ${RELEASE_RPM} in
#       centos*)
#           echo "detected CentOS ${RELEASE}"
#           ;;
#       redhat*)
  local k
  declare -A defaults=(
        [OS_ID]=
        [OS_NAME]=`uname -o`
        [OS_KERNEL]=`uname -s`
        [OS_ARCH]=`uname -m`
        # Cygwin puts Build version inside () which is nonstandard, and RHEL/Amazon/CentOS tack on 'arch'
        [OS_RELEASE]=$( uname -r | sed -e 's/(.*)$//' -e "s/\.`uname -m`$//" | awk -F . '{ print $NF }' )
        [OS_FAMILY]=$( facter osfamily 2>/dev/null )
        # or `lsb_release -i | awk '{ print $NF }' 2>/dev/null`
        [OS_MAJOR]=$( facter operatingsystemmajrelease 2>/dev/null )
        [OS_REPO_CMD]=
        [OS_PKG_CMD]=
        [OS_PKG_SUFFIX]=
		[OS_LOCAL_DIR]=/usr/local
		[OS_TEMP_DIR]=/tmp
        # also `facter lsb*`
  )
  #TODO? define *_CMD of type array
  # convirt MAP to individual OS_* variables
  for k in "${!defaults[@]}"; do
    [ -n "${!k}" ] || eval $k="${defaults[$k]}"
  done

  #TODO section only applies to Linux - break out into detect_${OS_KERNEL}
  case $OS_RELEASE in
    amzn?|el?)
        : ${OS_FAMILY:=RedHat}
        [ -n "$OS_REPO_CMD" ] || {
            OS_REPO_CMD="yum ${QUIET:+$_QUIET}"
            [ ${DEBUG:-0} -ge 2 ] && OS_REPO_CMD+=" --debuglevel=$DEBUG" || OS_REPO_CMD+=" --debuglevel=0"
            [ ${VERBOSE:-0} -ge 2 ] && OS_REPO_CMD+=" --rpmverbosity=info" || OS_REPO_CMD+=" --rpmverbosity=warn"
          }
        : ${OS_PKG_CMD:='rpm'}
        : ${OS_PKG_SUFFIX:='rpm'}
        ;;&
    amzn1|el6)
        OS_MAJOR=6
        ;;
    amzn2|el7)
        OS_MAJOR=7
        ;;
    deb*)
        : ${OS_FAMILY:=Debian}
        : ${OS_REPO_CMD:="apt-get --verbose-versions
            -o Dpkg::Options::='--force-confdef'
            -o Dpkg::Options::='--force-confold'
            -o Dpkg::Options::='--force-confmiss'"}
        : ${OS_PKG_CMD:='dpkg'}
        : ${OS_PKG_SUFFIX:='deb'}
        ;;&
    *)
  esac

  for k in ${!OS_*}; do debug "$k=${!k}"; done
  export ${!OS_*}
}


function package_name() {
  local name= py{2,3}

  while [ "${1:x}" ]; do
    [ -n "$1" ] || { shift; continue; }

    case "${OS_FAMILY:-$OS_NAME}" in
      *Linux)
            unset OS_FAMILY
			;&
      "")   detect_os
            ;;&
      RedHat)
        case "$1" in
          epel-release)
                name="https://dl.fedoraproject.org/pub/epel/epel-release-latest-${OS_MAJOR:?}.noarch.${OS_PKG_SUFFIX:?}"
                ;;
          ius-release)
                # TODO also 'centos', use $OS_ID? `curl 'https://setup.ius.io/' | bash` is possible but weak
                name="https://rhel${OS_MAJOR:?}.iuscommunity.org/ius-release.${OS_PKG_SUFFIX:?}"
                ;;
          puppet-release)
                name="https://yum.puppet.com/puppet/puppet-release-el-${OS_MAJOR:?}.noarch.${OS_PKG_SUFFIX:?}"
                ;;
		  python3|python3-*)
				rpm -q epel-release &>/dev/null && py3=34
				rpm -q ius-release &>/dev/null && py3=36u
				name=${1/3/$py3}
				;;
        esac
        ;;
      Debian)
        ;;
      *)    # unsupported
    esac

    echo "${name:-$1}"
    shift
  done
}


#---------------
#WIP - copy over latest from ami-factory/scripts/

os.detect

# misc notes
#if [ -f /etc/os-release ]; then
#    # freedesktop.org and systemd
#    . /etc/os-release
#    OS=$NAME
#    VER=$VERSION_ID
#elif type lsb_release >/dev/null 2>&1; then
#    # linuxbase.org
#    OS=$(lsb_release -si)
#    VER=$(lsb_release -sr)
#elif [ -f /etc/lsb-release ]; then
#    # For some versions of Debian/Ubuntu without lsb_release command
#    . /etc/lsb-release
#    OS=$DISTRIB_ID
#    VER=$DISTRIB_RELEASE
#elif [ -f /etc/debian_version ]; then
#    # Older Debian/Ubuntu/etc.
#    OS=Debian
#    VER=$(cat /etc/debian_version)
#elif [ -f /etc/SuSe-release ]; then
#    # Older SuSE/etc.
#    ...
#elif [ -f /etc/redhat-release ]; then
#    # Older Red Hat, CentOS, etc.
#    ...
#else
#    # Fall back to uname, e.g. "Linux <version>", also works for BSD, etc.
#    OS=$(uname -s)
#    VER=$(uname -r)
#fi
#
#case $(uname -m) in
#x86_64)
#    ARCH=x64  # or AMD64 or Intel64 or whatever
#    ;;
#i*86)
#    ARCH=x86  # or IA32 or Intel32 or whatever
#    ;;
#*)
#    # leave ARCH as-is
#    ;;
#esac

is_exec tree{,.com} ||
function os.tree() {
  local filter= type= reverse= flags=()
  local -a cmd=( 'find' )    #alt: 'ls -R'

  local OPTIND opt
  while getopts ':hdlL:P:x' opt 2>/dev/null; do
    case "$opt" in
      d)    flags+=( '-type' d ) ;;
      l)    cmd+=( '-L' ) ;;
      L)    flags+=( '-maxdepth' "$OPTARG" ) ;;
      P)    flags+=( '-name' "$OPTARG" ) ;;
      x)    flags+=( '-xdev' ) ;;

      :)    log.error "missing argument (-$OPTARG)"; return 2 ;;
      \?)   log.error "unsupported (-$OPTARG)" ;&
      h|*)  >&2 cat <<_EOF
Usage: $FUNCNAME [ options ] <dir> [<dir> ...]

  -d            list Directories only
  -l            follow symbolic links
  -L <level>    maximum traverse depth
  -P <pattern>  must escape any wildcards
  -x            stay on current filesystem

ref: http://mama.indstate.edu/users/ice/tree/tree.1.html
_EOF
            return 2
            ;;
    esac
  done
  shift $((OPTIND - 1))

  while read item; do
    out=$( echo "$item" | sed -e 's/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|- \1/' )
    #TODO handle filenames with spaces
    [ -h "$item" ] && out+=" -> "`$READLINK -ve "$item"`
    echo "$out"
  done < <( ${DEBUG:+ runv} "${cmd[@]}" -H ${1:-.} ${flags[@]} )
  echo
}
alias tree=os.tree


function os.file.replace() {
  # replace file and optionally take backup
  local orig="${1:?}"
  local new="${2:?}"
  shift 2

  #FIXME use getopt() for '-b'. and break on '--' and set filename(s) from remainder
  # see --* handling from ec2-validate.sh and packer wrapper.
  #TODO? use _xxx format so can be overriden from cmdline?
  local mode uid gid context flags

  # TODO Selinux Context with '%C' and --context=$context. check with 'getenforce' first
  #FIXME test for symlink and output %N ('link' -> 'real dest'), parse and strip quotes?

  # non-priv can stat restricted files if can walk intervening paths
  read -r mode uid gid context \
      < <(stat --format='%a %U %G' "$orig" 2>/dev/null)

  # clear parameters if our own
  [ "$uid" = "`id -nu`" ] && unset uid
  [ "$gid" = "`id -ng`" ] && unset gid

  ${DEBUG:+runv} ${uid:+$SUDO} install ${VERBOSE:+ -v} ${mode:+ -m $mode} \
      ${uid:+ -o $uid} ${gid:+ -g $gid} ${context:+ --context=$context} \
      ${flags:- -b} "$new" "$orig"
}
alias replace_file='os.file.replace'


#TODO move to .functions_os
#function userinfo() {
#  # analogous to /bin/usermod
#  #while [ "${1+xxx}" ] && [[ "$1" =~ -* ]]; do
#  local OPTIND
##  FIXME use getopts like a sane person!
#  [[ "$1" =~ -* ]] && { flag=${1:1:1}; shift; }
#
##FIXME define a HASH for lookups instead of this crap
#  case $flag in
#    l)  field=1 ;;&
#    u)  field=2 ;;&
#    g)  field=3 ;;&
#    d)  field=6 ;;&
#    L)  field=lock ;&
#    # TODO needs if/else
#XX    p)  getent shadow ${1:-`id -u`} | awk -F: -v field=$field '{ print $2 }' ;;
#XX    '') id -nu $1 ;;
#XX    *)  getent passwd ${1:-`id -u`}
#  esac
#  # login:x:uid:gid:gecos:home:shell
#  -c, --comment COMMENT         new value of the GECOS field
#  -d, --home HOME_DIR           new home directory for the user account
#  -e, --expiredate EXPIRE_DATE  set account expiration date to EXPIRE_DATE
#  -f, --inactive INACTIVE       set password inactive after expiration
#  -g, --gid GROUP               force use GROUP as new primary group
#  -G, --groups GROUPS           new list of supplementary GROUPS
#  -l, --login NEW_LOGIN         new value of the login name
#  -L, --lock                    lock the user account
#  -p, --password PASSWORD       use encrypted password for the new password
#  -s, --shell SHELL             new login shell for the user account
#  -u, --uid UID                 new UID for the user account
#}


# vim: expandtab:ts=4:sw=4
