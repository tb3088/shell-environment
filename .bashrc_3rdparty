#----- header -----
[ "${0##*/}" != "${BASH_SOURCE##*/}" ] || { >&2 echo -e "ERROR\tfile must be sourced ($0)"; return 2; }

# short-circuit inside screen or sub-shell
[ -z "$STY" -a ${SHLVL:-1} -eq 1 ] || return 0
#------------------

# Usage:
#   1) symlink: .bashrc_mvn -> .bashrc_3rdparty
#   2) args: .bashrc_3rdparty <pkg> ...
#   3) func: 3rdparty.add_program <pkg> ...


function 3rdparty.add_program() {
  local pkg=$1

  # search spec defined here so as to see current environment
  # close curly must be escaped when inside parameter expansion
  declare -A software_map=(
      ['aws']=${AWSCLI:-aws'{cli,\}{v,\}'$AWS_VERSION}
      ['session-manager-plugin']=$AWS_SM_PLUGIN
      ['mvn']=apache-maven
      ['npm']=nodejs
      ['java']=${JAVA_HOME:-'j{re,dk,se\}{-,\}'$JAVA_VERSION}
      ['puppet']=${PUPPET_BASE:-puppetlabs}
      ['go']=${GOROOT:-'go{,lang\}{-,\}'$GO_VERSION}
      ['ruby']=${RUBY_BASE:-'ruby{-,\}'$RUBY_VERSION}
    )

  [ -n "${software_map[$pkg]}" ] || {
      log.notice "undefined software package ($pkg)"; return; }

  is_exec "$pkg" && return

  function bin_search() (
      # process embedded glob patterns
      shopt -u failglob
      shopt -s globstar nullglob
      local IFS=$'\n'

      while read tld; do
        while read mid; do
          [ -n "$mid" ] || continue

          #WARN don't use /**/ since VERY slow
          for exe in "${tld:+$tld/}${mid#$tld}"*/{bin/,}"$pkg"; do
            [ -x "$exe" ] && { echo "$exe"; return; }
          done
        done < <(   # brace expansion
            if [[ "${software_map[$pkg]}" =~ [\,{] ]]; then
              eval printf '%s\\n' "${software_map[$pkg]}"
            else convert_path -E "${software_map[$pkg]}"; fi
          )
      done < <(
          printf '%s\n' '' /opt /usr/local
          convert_path -E "${USERPROFILE:-$HOME}" "$LOCALAPPDATA" "$PROGRAMFILES"
        )
  )

  local pbin=`bin_search "$pkg"`

  if [ -n "$pbin" ]; then addPath "${pbin%/*}"
  else log.warn "software package not found ($pkg)"; fi
}


declare -i __rc=0
# multiple arguments supported, but not recommend
while (( $# )); do
  [ -n "$1" ] || { shift; continue; }

  3rdparty.add_program "$1"; __rc=$((__rc | $?))
  shift
done

j=`readlink -e "$BASH_SOURCE"`
k="${BASH_SOURCE#*.bashrc_}"
[ "${j#*.bashrc_}" != "$k" ] && { 3rdparty.add_program "$k"; __rc=$?; }
unset j k

# always return 0 when whole-file
return 0    # ${__rc}


# vim: expandtab:ts=4:sw=4
