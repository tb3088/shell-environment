[[ "${OSTYPE:-`uname`}" == cygwin* ]] || return 0

contains "${CYGWIN:-xxx}" "winsymlinks" || export CYGWIN+=" winsymlinks:native"

function convert_path() {
    local escape=0 format= flags=

    # Cygwin automagically handle spaces on the $PATH and
    # must NOT have them escaped to work properly. But interactive
    # use on command-line needs to be inside quotes or escaped.
    #
    # Processing .bash_profile is Interactive so must be overridden

    while [ $# -ne 0 ]; do
        case $1 in
            '-e')   escape=1 ;;
            '-n')   escape=0 ;;
            dos|mixed|unix|windows)
                    format="-t $1" ;;
            '-'*)   flags+=" $1" ;;
            *)      break
        esac
        shift
    done

    [ -n "$1" ] || return 0

    [ $escape -eq 1 ] &&
        eval cygpath $format $flags -- \"$1\" | sed -e 's/ /\\ /g' ||
        eval cygpath $format $flags -- \"$1\"
}

function command_not_found_handle() { cmd.exe /D /C "$@"; }

#function su() {    # sorta works. 'uid' dosn't get updated
#  eval `awk -v who=$1 -F: '$1 == who { printf("env USER=%s HOME=%s %s", who, $(NF-1), $NF) }' /etc/passwd` "$@"
#}

export PATHSEP=';'

# vim: set expandtab:ts=4:sw=4
