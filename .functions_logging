# $Id

#LOG_TIMESTAMP=0
#LOG_STACKTRACE=0
#LOG_LEVEL=INFO
LOG_MASK=WARN
#LOG_FORMAT=


# reference https://code.woboq.org/gcc/include/sys/syslog.h.html
# syslog.h has DEBUG=7 ... EMERG=0 while Java/Python/Ruby(?) define as DEBUG=0 ... EMERG=7

[ -n "${__log_levels[*]}" ] ||
declare -Arx __log_levels=(
    [EMERG]=0   [PANIC]=0
    [0]='EMERG'
    [ALERT]=1
    [1]='ALERT'
    [CRIT]=2    [CRITICAL]=2
#    [FATAL]=2
    [2]='CRIT'
    [ERR]=3     [ERROR]=3
    [3]='ERROR'
    [WARN]=4    [WARNING]=4
    [4]='WARN'
    [NOTICE]=5
    [5]='NOTICE'
    [INFO]=6
    [6]='INFO'
    [DEBUG]=7
    [7]='DEBUG'
    # Java'ish extensions
    [TRACE]=8   [FINE]=8
    [8]='TRACE'
#    [FINEST]=9
)

[ -n "${LOG_FACILITIES[*]}" ] ||
declare -arx LOG_FACILITIES=(
    auth authpriv cron daemon kern lpr mail news syslog user uucp local{0..7}
  )

#FIXME rename to log.mask, if $1 set, then set, otherwise emit current setting
function log.mask {
  [ -n "$1" ] || { echo "${LOG_MASK:-WARN}"; return; }

  [ -n "${__log_levels[${1:-x}]}" ] && LOG_MASK="$1" || log_ERROR "invalid level ($1)"
}
readonly -f log.mask


#TODO function __log_verbose __log_debug() {
#  local _level=${VERBOSE:=$DEBUG}
# DEBUG>1 will lower LOG_MASK into TRACE
# call this individually for DEBUG and VERBOSE
#
#  case "$_level" in
#    -*) ;;  # ignore like '-v -d'
#
#    [4-9])  VERBOSE=3 ;&
#    [1-3])
#            [ -n "$DEBUG" ] || : $((_level--))
#            [ $_level -eq 0 ] ||
#_VERBOSE="-`printf -- '%.0sv' {1..$_level}`"
#        }
#        ;;&
#    3)  LOG_MASK='DEBUG' ;;
#    2)  LOG_MASK='INFO' ;;
#    1)  LOG_MASK='NOTICE' ;;
#    0|'') unset LOG_MASK ;;     # defaults to >NOTICE
#    *)  error "invalid level ($_level) from VERBOSE or DEBUG"
#  esac
#  [ -n "$DEBUG" ] && LOG_MASK='DEBUG'
#}


function __log_exit() {
  : ${RC:=$?}

  >&2 log "$@"
  if [ ${SHLVL:-1} -eq 1 -o -z "$BASH_SOURCE" ] ||
        [[ `/bin/ps -p $PPID | awk 'END { print $NF; }'` =~  screen ]]; then
    return $RC
  fi
  exit $RC
}

for k in "${!__log_levels[@]}"; do
  [[ $k == [0-9] ]] && continue
  declare -F "log_$k" >/dev/null && continue

  case "${__log_levels[$k]}" in
    [0-3])  copy_function __log_exit "log_$k" ;;
    [4-8])  eval function log_$k '{ >&2 log "$@"; }' ;;
  esac
  readonly -f "log_$k"

  # legacy and future naming style
  copy_function "log_$k" "log.${k,,}"
  readonly -f "log.${k,,}"
done
unset k
unset -f __log_exit


declare -F __log_level >/dev/null ||
function __log_level {
  [ -n "$1" ] || { echo -1; return 1; }

  local -u key=${1^^}
  key=${key#LOG[._]}

  local result=${__log_levels[$key]}
  [ -n "$result" ] || { echo -1; return 1; }

  # returns numeric value only
  [[ $result == [0-8] ]] && echo $result || echo $key
}
readonly -f __log_level


declare -F log >/dev/null ||
function log() {
  local -i level mask offset=1
  local format=${LOG_FORMAT:-'%-5s\t%s'}

  if level=`__log_level ${level:-$LOG_LEVEL}`; then
    # LOG_LEVEL=<level> log "msg"
    :
  elif level=`__log_level "$1"`; then
    # log <level> "msg"
    shift
  else
    # inside recursion from <level>() or log_<LEVEL>()
    level=`__log_level "${FUNCNAME[1]}"` && : $((offset++))
  fi

  if mask=`__log_level ${mask:-$LOG_MASK}`; then
    :
  else
    # set mask on externalities
    [ -n "$VERBOSE" ] && mask=`__log_level 'INFO'`
    if [ -n "$DEBUG" ]; then
      mask=`__log_level 'DEBUG'`

      # increase level if (DEBUG > 1)
      local -i _mask=$((mask + DEBUG - 1))
      [ $_mask -gt $mask ] && _mask=`__log_level $_mask` && mask=$_mask
    fi
  fi

  # sanity check
  [[ ${level:-x} == [0-8] ]] || level=`__log_level 'INFO'`
  [[ ${mask:-x}  == [0-8] ]] || mask=`__log_level 'WARN'`

  # squelch messages below mask
  [ $level -le $mask ] || return 0

  if [ -n "$LOG_STACKTRACE" -a "${FUNCNAME[1]}" != "$FUNCNAME" ]; then
    local -a msg=()

    for ((i=${#FUNCNAME[@]}-1; i>0; i--))  do
      msg+=("callstack: ${BASH_SOURCE[i]}/${FUNCNAME[i]}")
    done
    # prevent recursion loop
    mask='TRACE' level='TRACE' offset=2 $FUNCNAME "${msg[@]}"
  fi

  local fname=
  local level_name=${__log_levels[$level]}

  # embed FUNCNAME if DEBUG or higher
  if [ $level -ge `__log_level 'DEBUG'` -a -n "${FUNCNAME[offset]}" -a "${FUNCNAME[1]}" != "$FUNCNAME" ]; then
    fname="(${FUNCNAME[offset]}) "
  fi

  [ $# -gt 0 ] && __log_print "$@" || while IFS= read -r; do __log_print "$REPLY"; done
}
readonly -f log


declare -F __log_print >/dev/null ||
function __log_print() {
  local line

  while [ "${1:x}" ]; do
    printf -v line "${LOG_TIMESTAMP:+`date '+%FT%T.%3N'` }${format}" "$level_name" "${fname}$1"
    # allow primitive escape sequences
    echo -e "$line" | tee ${LOGFILE:+ -a "$LOGFILE"}
    if [ -n "$SYSLOG" ] && type -p "${LOGGER:=logger}" >/dev/null; then
      "$LOGGER" --priority user.${level_name,,} -- "$line"
    fi
    shift
  done
}
readonly -f __log_print

# vim: expandtab:ts=4:sw=4
