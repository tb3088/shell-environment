#LOG_TIMESTAMP=1                        # add timestamp to output
#LOG_MASK='WARNING'

# reference https://code.woboq.org/gcc/include/sys/syslog.h.html
# syslog.h has DEBUG=7 ... EMERG=0 while Java/Python/Ruby(?) define as DEBUG=0 ... EMERG=7

[ -n "${LOG_LEVELS[*]}" ] ||
declare -A -rx LOG_LEVELS=(
    [EMERG]=0   [PANIC]=0
    [ALERT]=1
    [CRIT]=2    [CRITICAL]=2
    [ERR]=3     [ERROR]=3
    [WARN]=4    [WARNING]=4
    [NOTICE]=5
    [INFO]=6
    [DEBUG]=7
    # Java'ish extensions
#   [TRACE]=8 [FINE]=8
#   [FINEST]=9
)

[ -n "${LOG_FACILITIES[*]}" ] ||
declare -a -rx LOG_FACILITIES=(
    auth authpriv cron daemon kern lpr mail news syslog user uucp local{0..7}
)


function __log_exit() {
  >&2 log "$@"
  if [ ${SHLVL:-1} -eq 1 -o -z "$BASH_SOURCE" ] ||
        [[ `/bin/ps -p $PPID | awk 'END { print $NF; }'` =~  screen ]]; then
    return ${RC:-1}
  fi
  exit ${RC:-1}
}

for k in "${!LOG_LEVELS[@]}"; do
  declare -F "log_$k" >/dev/null && continue

  case "${LOG_LEVELS[$k]}" in
    [0-3])  copy_function __log_exit "log_$k" ;;
    4)      eval function log_$k '{ >&2 log "$@"; }' ;;
    [5-7])  eval function log_$k '{ log "$@"; }' ;;
  esac
  readonly -f log_$k

  # define legacy function names
  copy_function "log_$k" "${k,,}"
done
unset k
unset -f __log_exit


declare -F log >/dev/null ||
function log() {
  local ts=`date '+%Y-%m-%dT%H:%M:%S'`
  local format=('%5s' '%s')
  local _line fo=1                      # FUNCNAME[0] will always be 'log()'
  declare -u fn level mask=$LOG_MASK

  # legacy style    # log <LEVEL> "msg"
  if [ -n "$1" -a "${LOG_LEVELS[${1^^}]}" ]; then
    level=$1; shift
  elif [ "${LOG_LEVELS[${level:-x}]}" ]; then
    :               # level=<LEVEL> log "msg"
  else
    unset level
    fn="${FUNCNAME[1]}"; fn="${fn#LOG_}"
    [ -n "${LOG_LEVELS[${fn:-x}]}" ] && { level="$fn"; fo=2; }
  fi

  # set mask on externalities
  [ -n "$VERBOSE" ] && mask='INFO'
  [ -n "$DEBUG" ]   && mask='DEBUG'

  # sanity check
  [ -n "${LOG_LEVELS[${level:-x}]}" ] || level='INFO'
  [ -n "${LOG_LEVELS[${mask:-x}]}" ]  || mask='WARNING'

  # squelch messages below mask
  [ ${LOG_LEVELS[$level]} -le ${LOG_LEVELS[$mask]} ] || return 0

  [ -n "${STACKTRACE}${DEBUG}" -a -n "${BASH_SOURCE[$fo]}" ] &&
        format+=" ${BASH_SOURCE[$fo]}/${FUNCNAME[$fo]}"

  # empty arg is wierd but tolerated
  while [ "${1+x}" ]; do
    printf -v _line "${LOG_TIMESTAMP:+$ts }${format[*]}" $level "$1"
    _line=`echo -e "$_line"`
    tee -a $LOGFILE <<< "$_line"
    [ -n "$SYSLOG" ] && ${LOGGER:-logger --priority user.${level,,}} -- "$_line"
    shift
  done
}
readonly -f log

# vim: expandtab:ts=4:sw=4
