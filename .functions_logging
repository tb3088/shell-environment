# $Id

#LOG_TIMESTAMP=1
#LOG_STACKTRACE=1
#LOG_MASK='WARN'


# reference https://code.woboq.org/gcc/include/sys/syslog.h.html
# syslog.h has DEBUG=7 ... EMERG=0 while Java/Python/Ruby(?) define as DEBUG=0 ... EMERG=7

[ -n "${LOG_LEVELS[*]}" ] ||
declare -Ar LOG_LEVELS=(
    [EMERG]=0   [PANIC]=0
    [0]='EMERG'
    [ALERT]=1
    [1]='ALERT'
    [CRIT]=2    [CRITICAL]=2
#    [FATAL]=2
    [2]='CRIT'
    [ERR]=3     [ERROR]=3
    [3]='ERROR'
    [WARN]=4    [WARNING]=4
    [4]='WARN'
    [NOTICE]=5
    [5]='NOTICE'
    [INFO]=6
    [6]='INFO'
    [DEBUG]=7
    [7]='DEBUG'
    # Java'ish extensions
    [TRACE]=8   [FINE]=8
    [8]='TRACE'
#    [FINEST]=9
)

[ -n "${LOG_FACILITIES[*]}" ] ||
declare -ar LOG_FACILITIES=(
    auth authpriv cron daemon kern lpr mail news syslog user uucp local{0..7}
)

function log-setmask {
  local -u key=$1
  [ -n "${LOG_LEVELS[${key:-x}]}" ] && LOG_MASK="$key" || log_ERROR "invalid level ($key)"
}


#TODO function __log_verbose __log_debug() {
#  local _level=${VERBOSE:=$DEBUG}
# DEBUG>1 will lower LOG_MASK into TRACE
# call this individually for DEBUG and VERBOSE
#
#  case "$_level" in
#    -*) ;;  # ignore like '-v -d'
#
#    [4-9])  VERBOSE=3 ;&
#    [1-3])
#            [ -n "$DEBUG" ] || : $((_level--))
#            [ $_level -eq 0 ] ||
#_VERBOSE="-`printf -- '%.0sv' {1..$_level}`"
#        }
#        ;;&
#    3)  LOG_MASK='DEBUG' ;;
#    2)  LOG_MASK='INFO' ;;
#    1)  LOG_MASK='NOTICE' ;;
#    0|'') unset LOG_MASK ;;     # defaults to >NOTICE
#    *)  error "invalid level ($_level) from VERBOSE or DEBUG"
#  esac
#  [ -n "$DEBUG" ] && LOG_MASK='DEBUG'
#}


function __log_exit() {
  local rc=${RC:-$?}
  >&2 log "$@"
  if [ ${SHLVL:-1} -eq 1 -o -z "$BASH_SOURCE" ] ||
        [[ `/bin/ps -p $PPID | awk 'END { print $NF; }'` =~  screen ]]; then
    return $rc
  fi
  exit $rc
}

for k in "${!LOG_LEVELS[@]}"; do
  [[ $k == [0-9] ]] && continue
  declare -F "log_$k" >/dev/null && continue

  case "${LOG_LEVELS[$k]}" in
    [0-3])  copy_function __log_exit "log_$k" ;;
    [4-8])  eval function log_$k '{ >&2 log "$@"; }' ;;
  esac
  readonly -f "log_$k"
  # legacy functions
  copy_function "log_$k" "${k,,}"
done
unset k
unset -f __log_exit


function log-level {
  # returns numeric value only
  local -u key=${1#log_}
  local result="${LOG_LEVELS[${key:-x}]}"

  [ -n "$result" ] || { echo -1; return 1; }
  [[ $result == [0-8] ]] && echo $result || echo $key
}


declare -F log >/dev/null ||
function log() {
  local -r ts=`date '+%Y-%m-%dT%H:%M:%S'`
  local -a format=( ${LOG_FORMAT[@]:-'%-5s' '\t%s'} )

  local -A default=([level]=`log-level 'INFO'` [mask]=`log-level 'WARN'`)
  local -i level mask=`log-level $LOG_MASK` offset=1

  # legacy invocation
  if level=`log-level "$1"`; then
    shift                   # log <level> "msg"
  elif level=`log-level $LOG_LEVEL`; then
    :                       # LOG_LEVEL=<level> log "msg"
  else                      # level() or log_LEVEL() "msg"
    level=`log-level ${FUNCNAME[1]}` && offset+=1
  fi

  # set mask on externalities
  if [ -z "$mask" ]; then
    [ -n "$VERBOSE" ] && mask=`log-level 'INFO'`
    [ -n "$DEBUG" ] && { mask=`log-level 'DEBUG'`
        #FIXME handle large values that overrun MAX(LOG_LEVELS)
        [ $(($DEBUG - 1)) -gt 0 ] && mask+=$(($DEBUG - 1))
      }
  fi

  # sanity check
  [[ ${level:- -1} == [0-8] ]] || level=${default['level']}
  [[ ${mask:- -1}  == [0-8] ]] || mask=${default['mask']}

  # squelch messages below mask
  [ $level -le $mask ] || return 0


  if [ -n "$LOG_STACKTRACE" -a "${FUNCNAME[1]}" != "$FUNCNAME" ]; then
    local -a msg=()
    local -i i
    for i in ${!FUNCNAME[@]}; do
      [ $i -eq 0 ] && continue          # skip self
      msg+=("callstack: ${BASH_SOURCE[i]}/${FUNCNAME[i]}()")
    done
    LOG_MASK='TRACE' log_TRACE "${msg[@]}"
  fi

  local line fn level_name="${LOG_LEVELS[$level]}"
  [ $level -ge `log-level 'DEBUG'` -a -n "${FUNCNAME[offset]}" -a "${FUNCNAME[1]}" != "$FUNCNAME" ] && fn="${FUNCNAME[offset]}() "

  while [ "${1+x}" ]; do                # blank lines allowed
    printf -v line "${LOG_TIMESTAMP:+$ts }${format[*]}" "$level_name" "$fn$1"
    line=`echo -e "$line"`              # primitive escape sequences
    tee -a $LOGFILE <<< "$line"
    [ -n "$SYSLOG" ] && ${LOGGER:-logger --priority user.${level_name,,}} -- "$line"
    shift
  done
}
readonly -f log

# vim: expandtab:ts=4:sw=4
