#----- header -----
[ "${0##*/}" != "${BASH_SOURCE##*/}" ] || { >&2 echo -e "ERROR\tfile must be sourced ($0)"; return 2; }

# prevent multiple-inclusion
__tag=SOURCE_${BASH_SOURCE//[^a-zA-Z0-9_]/}
[ ${!__tag:-0} = 0 ] || return 0
eval $__tag=1
#------------------

[[ $BASH_VERSION =~ 4.[2-4] ]] || [[ $BASH_VERSION =~ 5 ]] || { >&2 echo -e 'ERROR\tbash ~> 4.2 required'; exit 126; }


shopt -s globstar extglob nullglob
shopt -u failglob
set -o pipefail

WHICH="`type -p which` --skip-alias --skip-functions"

# mimic 'set -x' and send STDERR to file
function runv() {
  local indent=`printf '%.0s+' {1..$SHLVL}`
  >&2 printf "%s %s\n" "$indent" "$*"

  [ -z "$NOOP" ] || return

#  local command=`echo "${1/eval/$2}" | sed -e 's/\`//g'`
  local command=${1/eval/${2//\`/}}
  local outf=`mktemp "${command##*/}-XXXXX"`
  "$@" > >( tee "$outf".out-$$ ) 2> >( tee "$outf".err-$$ >&2 )
}


function is_interactive {
  [[ $- =~ i ]] || tty -s || [ -n `tset -q` ]
}

#TODO is_what() returns 'type -t' or 'declare -p' mapped back to English
#function is_what

function __is_type {
  # short-circuits on first error
  local compare
  local -Ar types=(
      [a]='array'       [array]='a'
      [A]='hash'        [hash]='A'
      [f]='function'    [function]='f'
      [i]='integer'     [integer]='i'
      [l]='lower'       [lower]='l'
      [n]='nref'        [nref]='n'
      [-]='string'      [string]='-'
      [r]='readonly'    [readonly]='r'
      [u]='upper'       [upper]='u'
    )

  set -- "${@:-$(</dev/stdin)}"

  case "${compare:=${FUNCNAME[1]#is_}}" in
    file)
        while (( $# )); do
          [ -n "$1" ] || { shift; continue; }

          #alt: readlink -qe "$1"
          [ -f "$1" ] || {
              [ -n "$VERBOSE" ] && log.${LOG_LEVEL:-error} "file not found ($1)"
              return 1
            }
          shift
        done
        return
        ;;

    exec*)
        while (( $# )); do
          [ -n "$1" ] || { shift; continue; }

          $WHICH "$1" &>/dev/null || {
              [ -n "$VERBOSE" ] && log.${LOG_LEVEL:-error} "unknown command ($1)"
              return 1
            }
          shift
        done
        return
        ;;

    func*)
        while (( $# )); do
          [ -n "$1" ] || { shift; continue; }

          declare -F "$1" >/dev/null || {
              [ -n "$VERBOSE" ] && log.${LOG_LEVEL:-error} "undefined function ($1)"
              return
            }
          shift
        done
        return
        ;;

    read*)
        local _readonly=1
        ;;

    *)  [ -n "${types[$compare]}" ] || {
            log.error "unsupported type ($compare)"
            return 2
          }
  esac

  local whatami flag
  while (( $# )); do
    [ -n "$1" ] || { shift; continue; }

    # suss out functions during 'readonly'
    [ $_readonly -eq 1 -a `type -t "$1"` = 'function' ] && flag=F || flag=

    whatami=`declare -p${flag} "$1" 2>/dev/null | awk '{ print $2; }'` || {
        [ -n "$VERBOSE" ] && log.${LOG_LEVEL:-error} "item not found ($1)"; return
      }

    whatami=${whatami#-}
    [[ $whatami =~ ${types[$compare]} ]] || {
        [ -n "$VERBOSE" ] && log.${LOG_LEVEL:-error} "type mismatch ($1: ${types[$whatami]} != $compare)"
        return
      }
    shift
  done
}

for f in array exec hash integer string file function readonly; do
  declare -F is_$f >/dev/null || {
      eval function is_$f '{ __is_type "$@"; }'
      readonly -f is_$f
    }
done


function is_windows() {
  # deliberate NOOP
  return 1
}


# used for override 'exit' program flow
function _continue() { [ -n "$CONTINUE" ]; }


function convert_path() {
  local -i escape
  local OPTIND

  while getopts ":eE" opt; do
    case $opt in
      e)    escape=1 ;;     # default
      E)    escape=0 ;;
      \?)   ;;
    esac
  done
  shift $((OPTIND - 1))

  # read from stdin if no args
  set -- "${@:-$(</dev/stdin)}"

  # silently ignore empty param
  while (( $# )); do
    [ -n "$1" ] || { echo; shift; continue; }

    # unescape whitespace to not double-escape
    local p="${1//\\ / }"

    [ ${escape:-1} -eq 1 ] && echo "${p// /\\ }" || echo "$p"
    shift
  done
}


#TODO handle Hash/Array,
#FIXME leverage IFS="$delim" read <<< "$1"
# note IFS only considers a single char, you can't have compound IFS
# see https://unix.stackexchange.com/questions/7904/can-ifs-internal-field-separator-function-as-a-single-seperator-for-multiple-c
# for a neat trick. but if say delim='::' you can't just collapse into a single-char unless
# you can correctly guess something not in the data stream (eg. high-order non-printing char?)
# otherwise have to feed it to AWK/SED for magic

function contains() {
  local delim method
  : ${delim=${PATHSEP:-\:}}

  local -r source="${delim}${1:?}${delim}"
  local -r sub="${delim}${2:?}${delim}"

  # empty string inside empty is valid
  case "$method" in
    grep)   grep -q "$sub" <<< "$source" ;;
    pe)     [ "${source#*$sub}" != "$source" ] ;;
    regex)  [[ "$source" =~ $sub ]] ;;
#    insensitive)
#            ;&
    *)      [[ "$source" == *$sub* ]]
  esac
}


function addPath() {
  # pre-/post-pend [multiple] elements to an environment variable
  # but does NOT sub-divide arguments!

  # catch null-glob case
  (( $# )) || return

#TODO use join_string() to handle arbitrary delimiters and whitespace
#TODO? rewrite callers as PATH=`join_string $1 $2 $delim`

  local k delim flags=()
  local -i prepend
  local -ir _prepend=${prepend:-0}

  # short-cut to 'PATH' mode
  [ "${1:0:1}" = '/' ] && k='PATH' || { k=$1; shift; }

  # check variable name
  [[ "$k" =~ ^[A-Za-z] ]] || { log.error "invalid variable ($k)"; return; }

  # special case
  [ "$k" = 'PATH' ] && { delim=':' flags+=('-E'); }

  : ${delim:=${PATHSEP:-':'}}
  local -n kval=$k

  ${DEBUG:+ log.trace "$k before (delim=$delim)" "$kval"}

  while (( $# )); do
    [ -n "$1" ] || { shift; continue; }

    prepend=$_prepend   # restore initial state

    # leading '-' means prepend
    [ "${1:0:1}" = '-' ] && { prepend=1; v=${1:1}; } || v=$1

    # unroll and check validity
    # ref: https://sourceware.org/git/?p=newlib-cygwin.git;a=commit;h=aec6479820fee5f71d50930bf0dde2bbf386bd4b
    v=`readlink -e "$v"` && [ -d "$v" ] || {
        log.notice "bad path ($v)"
        shift; continue
      }

    # do *NOT* prefix call to convert_path() with '${DEBUG:+ runv}'
    v=`convert_path ${flags[@]} "$v"`

    delim=$delim contains "$kval" "$v" || {
        [ $prepend -eq 1 ] && kval="$v${delim}${kval}" || kval+="${delim}$v"
      }

    shift
  done

  # remove duplicate and dangling delimiter
  kval=${kval//$delim$delim/$delim}
  kval=${kval##$delim}
  kval=${kval%%$delim}

  ${DEBUG:+ log.trace "$k after" "$kval"}
}


function rmPath() {
  local k v flag delim

  [ $# -eq 1 ] && k='PATH' || { k="$1"; shift; }
  [[ "$k" =~ ^[A-Za-z] ]] || { RC=2 log.error "invalid variable ($k)"; return; }
  local -n kval=$k

  [ "$k" = 'PATH' ] && { delim=':'; flag='-E'; }
  : ${delim:=${PATHSEP:-\:}}

  ${DEBUG:+ log.trace "$k before" "$kval"}

  while (( $# )); do
    [ -n "$1" ] || { shift; continue; }

    #alt: nref=`sed -E "s|${delim}?$v${delim}?|${delim}|" <<< "$nref"`
    kval=$(
        IFS=$delim
        read -ra items <<< "$kval"
        for i in ${!items[@]}; do
          [ "${items[i]}" = "$1" ] && unset 'items[i]'
        done
        echo "${items[*]}"
    )
    shift
  done

  # remove duplicate and dangling delimiter
  kval=${kval//$delim$delim/$delim}
  kval=${kval##$delim}
  kval=${kval%%$delim}

  ${DEBUG:+ log.trace "$k after" "$kval"}
}


function define() {
  # Assign a HEREDOC to a variable. To preserve space/tab use '<<-_EOF'.
  # Contents will be expanded unless marker ('_EOF') is quoted.
  #
  # Usage: define VAR <<_EOF ...

  IFS=$'\n' read -r -d '' $1 || true
}


function replace_file() {
  # replace file and optionally take backup
  local orig="${1:?}"
  local new="${2:?}"
  shift 2

  #FIXME use getopt() for '-b'. and break on '--' and set filename(s) from remainder
  # see --* handling from ec2-validate.sh and packer wrapper.
  #TODO? use _xxx format so can be overriden from cmdline?
  local mode uid gid context flags

  # TODO Selinux Context with '%C' and --context=$context. check with 'getenforce' first
  #FIXME test for symlink and output %N ('link' -> 'real dest'), parse and strip quotes?

  # non-priv can stat restricted files if can walk intervening paths
  read -r mode uid gid context \
      < <(stat --format='%a %U %G' "$orig" 2>/dev/null)

  # clear parameters if our own
  [ "$uid" = "`id -nu`" ] && unset uid
  [ "$gid" = "`id -ng`" ] && unset gid

  ${DEBUG:+runv} ${uid:+$SUDO} install ${VERBOSE:+ -v} ${mode:+ -m $mode} \
      ${uid:+ -o $uid} ${gid:+ -g $gid} ${context:+ --context=$context} \
      ${flags:- -b} "$new" "$orig"
}


#TODO? extend to other types
function whereis_function() {
  shopt -s extdebug
  declare -F ${1:?} | awk '{ print $3; }'
  shopt -u extdebug
}


function list_functions() {
  local file

  while [ -n "$1" ]; do
    [ -f "$1" ] || { shift; continue; }

    # use sub-shell to not contaminate current, recurse
    ( source "$1" &>/dev/null; file="$1" $FUNCNAME )
    shift
  done

  shopt -s extdebug
  declare -F `compgen -A function` | awk -v fn="$file" '$3 ~ fn { printf("%-15s\t%s\n", $1, $3) }'
  shopt -u extdebug

#NOTE
# This doesn't work if "$file" sources other files - answer is polluted.
#
#  env -i /bin/bash --noprofile --norc <<_EOF
#        source "$file" &>/dev/null
#        compgen -A function    #alt: declare -F | cut -d' ' -f3
#_EOF
}


#TODO? rename web.getcert
function getcert() {
  local uri=${1:?}; uri=${uri#*://}
  local host=${uri%:*}
  local port=${uri#*:}

  [ "$host" != "$port" ] || port=${2:-443}

  output=`openssl s_client -connect ${host}:${port} < /dev/null`
  [ -n "$output" ] || return

  gawk 'BEGIN { RS="\n---\n"; } NR==2 { print; exit; }' <<< "$output"
  gawk 'BEGIN { RS="\n---\n"; } NR==3 { print; exit; }' <<< "$output" |
      openssl x509 -noout -issuer -dates -subject -serial 2>/dev/null
}


function pause() {
  [ $# -eq 0 ] && read -p 'Press [ENTER] to continue ...' || read -p "$*"
}


function confirm() {
  read -n 1 -t 15 -p 'Are you sure (y/N)? '
  echo
  [ "${REPLY^^}" = "Y" ]
}


function copy_function() {
  # arg1: source name or fully declared format
  # argN: destination
  #
  # Does NOT support recursion since fails easily or in unintended ways.
  # Using SED with BOL, EOL or whitespace detection isn't reliable either.

  local fname=${1:?source} body
  local -i overwrite

  shift

  if echo $fname | grep -q '() {'; then
    body=$fname
    fname=`awk '{print $1; exit}' <<< "$body"`
  else
    # allow side-channel injection
    : ${body:=`declare -f "$fname"`}
  fi

  [ -n "$fname" -a -n "$body" ] || return

  for target in "$@"; do
    # ignore badly-formed arguments
    [ -n "$target" ] || continue

    is_function "$target" && {
        if [ ${overwrite:-0} -eq 1 ]; then
          is_readonly "$target" && { log.debug "ERROR\tread-only function ($target)"; return 1; }
          log.debug "NOTICE\toverwriting function ($target)"
        else
          log.debug "WARN\tfunction exits ($target)"
          continue
        fi
      }

    #alt: "function $target ${body#*\(\)}"
    eval "${body/$fname/$target}"
  done
}


function rename_function() {
  copy_function "${1:?source}" "${2:?dest}" && unset -f "$1"
}


function join_string() {
  local quote escape= delim

  [ -n "${delim+X}" ] || { delim=$1; shift; }

  # escape whitespace, or even delimiter (rare)
  [ -n "$quote" ] || escape=${IFS:0:1}
  [ "$quote" = "$delim" ] && escape=$delim
  [ -n "$escape" ] && set -- "${@//$escape/\\$escape}"

  local IFS=
  # prepend each word during expansion
  local _str="${*/#/${delim}${quote}}"

  # strip leading 'delim' and tack on trailing 'quote'
  echo "${_str#${delim}}${quote}"

  #alt: slower
#  printf "${quote}%s${quote}" "$1"
#  [ $# -gt 1 ] || return 0
#  printf "${delim}${quote}%s${quote}" "${@:2}"
}


function join_quote() { quote=\' join_string "$@"; }

# function __parse_options() {
    # local option{,2} arg IFS='
# ,/|'
#FIXME this looks very odd.
# enforce --[no-][a-zA-Z]+=<value>, --[no-][a-zA-Z] <value>, --<flag> sets $flag=1,
# create a hash of options and values and any single dash are likewise treated as long
  # for arg in $1; do
    # case "$arg" in
      # ---*) break ;;
      # --?*) option="$arg"; break ;;
      # -?*)  [ -n "$option" ] || option="$arg" ;;
      # *)    break ;;
    # esac;
  # done
#  # [ -n "$option" ] || return 0
#
#   IFS='
# '
  # if [[ $option =~ (\[((no|dont)-?)\]). ]]; then
    # option2=${option/"${BASH_REMATCH[1]}"/}
    # option2=${option2%%[<{().[]*}
    # printf '%s\n' "${option2/=*/=}"
    # option=${option/"${BASH_REMATCH[1]}"/"${BASH_REMATCH[2]}"}
  # fi
  # option="${option%%[<{().[]*}"
  # printf '%s\n' "${option/=*/=}"
# }


#TODO move to .functions_os
function userinfo() {
  # analogous to /bin/usermod
  #while [ "${1+xxx}" ] && [[ "$1" =~ -* ]]; do
  local OPTIND
#  FIXME use getopts like a sane person!
  [[ "$1" =~ -* ]] && { flag=${1:1:1}; shift; }

#FIXME define a HASH for lookups instead of this crap
  case $flag in
    l)  field=1 ;;&
    u)  field=2 ;;&
    g)  field=3 ;;&
    d)  field=6 ;;&
    L)  field=lock ;&
    # TODO needs if/else
    p)  getent shadow ${1:-`id -u`} | awk -F: -v field=$field '{ print $2 }' ;;
    '') id -nu $1 ;;
    *)  getent passwd ${1:-`id -u`}
  esac
#  # login:x:uid:gid:gecos:home:shell
#  -c, --comment COMMENT         new value of the GECOS field
#  -d, --home HOME_DIR           new home directory for the user account
#  -e, --expiredate EXPIRE_DATE  set account expiration date to EXPIRE_DATE
#  -f, --inactive INACTIVE       set password inactive after expiration
#  -g, --gid GROUP               force use GROUP as new primary group
#  -G, --groups GROUPS           new list of supplementary GROUPS
#  -l, --login NEW_LOGIN         new value of the login name
#  -L, --lock                    lock the user account
#  -p, --password PASSWORD       use encrypted password for the new password
#  -s, --shell SHELL             new login shell for the user account
#  -u, --uid UID                 new UID for the user account
}


#[ os.is_command tree -o declare -F tree ] &>/dev/null ||
function tree() {
  local OPTIND opt
  local filter= type= reverse= flags=()
  local _find='find'    #alt: 'ls -R'

  while getopts ":hdlL:P:x" opt 2>/dev/null; do
    case "$opt" in
      d)    flags+=('-type d') ;;
      l)    _find+=" -L" ;;
      L)    flags+=("-maxdepth $OPTARG") ;;
      P)    flags+=("-name $OPTARG") ;;
      x)    flags+=('-xdev') ;;

      :)    RC=2 log.error "missing argument to '-$OPTARG'"; return ;;
      \?)   RC=2 log.error "unknown option '-$OPTARG'" ;&
      h|*)  >&2 cat <<_EOF
Usage: $FUNCNAME [ options ] <dir> [<dir> ...]

  -d            list Directories only
  -l            follow symbolic links
  -L <level>    maximum traverse depth
  -P <pattern>  must escape any wildcards
  -x            stay on current filesystem

ref: http://mama.indstate.edu/users/ice/tree/tree.1.html
_EOF
            return $RC
            ;;
    esac
  done
  shift $((OPTIND - 1))

  while (( $# )); do
    ${DEBUG:+ runv} $_find ${1:-.} ${flags[@]} | sed -e '2,$ s/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'
    echo
    shift
  done
}


function min() {
  local flag=() values=()

  while [ ${1+x} ]; do
    [[ $1 = -[a-zA-Z] ]] && flag+=($1) || {
        IFS=' ' read -a v <<< "$1"
        values+=( ${v[@]} )
      }
    shift
  done
  printf "%s\n" ${values[@]} | sort "${flag[@]}" | head -n 1
}


function max()  { min -r "$@"; }

function keys() { local -n nref=${1:?}; echo "${!nref[@]}"; }

function values() { local -n nref=${1:?}; echo "${nref[@]}"; }

function value()  { local -n nref=${1:?}; echo "${nref[${2:?}]}"; }

#TODO array functions; push, pop, delete, replace, truncate


function expand_dvq() {
  # standardize behavior keyed off of 'special' variables
  local v level

  for v in DEBUG VERBOSE QUIET NOOP; do
    local -n vref="__${v,,}"
    c=${v:0:1}; c=${c,,}

    # String compare is more robust than Integer
    [ -z "${!v}" -o "${!v}" = "0" ] && continue

    level=`printf "%d" ${!v} 2>/dev/null` || level=1
    # {1..$level} doesn't work without eval
    eval printf -v vref "%0.s$c" {1..$level}
    # prepend '-' (dash)
    vref="-${vref}"
  done
}


# rudimentary logging implementation
function log {
  local -u level
  local fname=
  local -i offset=1

  if [ "${FUNCNAME[1]:0:4}" = 'log.' ]; then
    : ${level:=${FUNCNAME[1]:4}}
    : $((offset++))
  fi
  [ -n "${FUNCNAME[$offset]}" ] &&
      fname="[${BASH_SOURCE[offset]##*/}:${FUNCNAME[offset]}] "
  
  while [ "${1+X}" ]; do 
    >&2 echo -e "${level:-LOG}\t${fname}$1"
    shift
  done
}

function log.none { return; }

function log.debug {
  local rc=$?

  [ -n "$DEBUG" ] && log "$@"
  return ${RC:-$rc}
}

function log.info {
  local rc=$?

  [ -n "${VERBOSE}${DEBUG}" ] && log "$@"
  return ${RC:-$rc}
}

function log.notice { 
  local rc=$?

  log "$@"
  return ${RC:-$rc}
}

function log.error {
  local rc=$?

  log "$@"
  if [ ${SHLVL:-1} -eq 1 -o -z "$BASH_SOURCE" ] ||
      [[ `\ps -p $PPID | awk 'END { print $NF; }'` =~  screen ]]; then
    return ${RC:-$rc}
  fi
  exit ${RC:-$rc}
}

copy_function log.debug log.trace
copy_function log.notice log.warn

for f in "${BASH_SOURCE}"_logging; do
  [ -f "$f" ] || continue
  source "$f" || echo >&2 "RC=$? during $f"
done

# toggle_shopt()
# local _save=`shopt -p $1`
# ...
# ${_save}

# vim: expandtab:ts=8:sw=4
