# use soft-override

: ${PATHSEP=':'}

declare -F is_windows >/dev/null ||
function is_windows() { false; }


declare -F convert_path >/dev/null ||
function convert_path() {
  local OPTIND
  while getopts ":eEnt:" opt; do
    :
  done
  shift $((OPTIND-1))

  [ -n "$1" ] || return 0
  echo "$1"
}


#TODO handle Hash/Array,
#FIXME leverage IFS="$delim" read <<< "$1"
# note IFS only considers a single char, you can't have compound IFS
# see https://unix.stackexchange.com/questions/7904/can-ifs-internal-field-separator-function-as-a-single-seperator-for-multiple-c
# for a neat trick. but if say delim='::' you can't just collapse into a single-char unless
# you can correctly guess something not in the data stream (eg. high-order non-printing char?)
# otherwise have to feed it to AWK/SED for magic

declare -F contains >/dev/null ||
function contains() {
  local delim method
  : ${delim=${PATHSEP:?}}
  local -r source="${delim}${1:?}${delim}"
  local -r sub="${delim}${2:?}${delim}"

  # empty string inside empty is valid
  case "$method" in
    grep)   grep -q "$sub" <<< "$source" ;;
    pe)     [ "${source#*$sub}" != "$source" ] ;;
    regex)  [[ "$source" =~ $sub ]] ;;
#    insensitive)
#            ;&
    *)      [[ "$source" == *$sub* ]]
  esac
}


declare -F addPath >/dev/null ||
function addPath() {
  # pre-/post-pend [multiple] elements to an environment variable
  # but does NOT sub-divide arguments!

#TODO use join_string() to handle arbitrary delimiters and whitespace
#TODO? rewrite callers as PATH=`join_string $1 $2 $delim`

  local k v flags=() delim
  local -i prepend
  local -ir _prepend=${prepend:-0}

  [ $# -eq 1 ] && k='PATH' || { k="$1"; shift; }
  [[ "$k" =~ ^[A-Za-z] ]] || { RC=2 log_ERROR "invalid variable ($k)"; return; }
  local -n nref=$k

  [ "$k" = 'PATH' ] && { delim=':'; flags+=('-E'); }
  : ${delim:=${PATHSEP:?}}

  log_TRACE "before" "$k=$nref"
  while [ "${1+x}" ]; do
    [ -n "$1" ] || continue

    prepend=$_prepend           # restore state
    v="$1"
    # leading '-' means prepend
    [ "${1:0:1}" = '-' ] && { prepend=1; v="${1:1}"; }

    # do *NOT* prefix with '${DEBUG:+ runv}'
    v=`convert_path ${flags[@]} "$v"`
    delim="$delim" contains "$nref" "$v" || {   # pedant
        [ $prepend -eq 1 ] && nref="$v${delim}$nref" || nref+="${delim}$v"
      }

    # embedded spaces/special chars require lazy evaluation
#    [ $prepend -eq 1 ] && { eval $k="$v${delim}\$$k"; } || eval $k+="${delim}$v"
    # [ $prepend -eq 1 ] && nref="$v${delim}${nref}" || nref+="${delim}$v"
    shift
  done
  #TODO strip double $delim
  log_TRACE "after" "$k=$nref"
}


declare -F rmPath >/dev/null ||
function rmPath() {
  local k v flag delim

  [ $# -eq 1 ] && k='PATH' || { k="$1"; shift; }
  [[ "$k" =~ ^[A-Za-z] ]] || { RC=2 log_ERROR "invalid variable ($k)"; return; }
  local -n nref=$k

  [ "$k" = 'PATH' ] && { delim=':'; flag='-E'; }
  : ${delim:=${PATHSEP:?}}

  log_TRACE "before" "$nref"
  while [ "${1+x}" ]; do
    [ -n "$1" ] || continue

    #alt: nref=`sed -E "s|${delim}?$v${delim}?|${delim}|" <<< "$nref"`
    nref=$(
        IFS=$delim
		>&2 cat -etv <<<"$IFS"
        read -ra items <<< "$nref"
        for i in ${!items[@]}; do
          [ "${items[i]}" = "$1" ] && unset 'items[i]'
        done
        echo "${items[*]}"
    )
    shift
  done
  #TODO strip double $delim
  log_TRACE "after" "$nref"

  # trim dangling $delim
#  eval $k=\"\${$k/#${delim}}\"
#  eval $k=\"\${$k/%${delim}}\"
}


function define() {
  # Assign a HEREDOC to a variable. To preserve space/tab use '<<-_EOF'.
  # Contents will be expanded unless marker ('_EOF') is quoted.
  # Usage: define VAR <<_EOF ...

  local IFS
  # alt: IFS='
  #'
  IFS=$'\n' read -r -d '' $1 || true
}


#TODO /etc/init.d/functions typically defines
declare -F pidof >/dev/null ||
function pidof() {
    ps -o pid,cmd | awk -v pat="$1" '$NF ~ pat { print $1 }'
}


function getcert() {
  : ${1:?}
  host=${1%:*}
  port=${1#*:}
  [ "$host" = "$port" ] && port=${2:-443}

  output=`openssl s_client -connect ${host}:${port} </dev/null 2>/dev/null`
  if [ -n "$output" ]; then
    gawk 'BEGIN { RS="\n---\n"; } NR==2 { print; exit; }' <<< "$output"
    gawk 'BEGIN { RS="\n---\n"; } NR==3 { print; exit; }' <<< "$output" | openssl x509 -noout -issuer -dates -subject -serial 2>/dev/null
  else
    return 1
  fi
}


declare -F pause >/dev/null ||
function pause() {
  [ $# -eq 0 ] && read -p 'Press [ENTER] to continue ...' || read -p "$*"
}


declare -F confirm >/dev/null ||
function confirm() {
  read -n 1 -t 15 -p 'Are you sure (y/N)? '
  echo
  [[ "$REPLY" =~ [yY] ]]
}


# Does NOT support recursion since fails easily or in unintended ways.
# Using SED with BOL, EOL or whitespace detection isn't reliable either.
declare -F copy_function >/dev/null ||
function copy_function() {
  # Does NOT support recursion since fails easily or in unintended ways.
  local readonly source=`declare -f "${1:?}"`
  local -i overwrite

  [ -n "$source" ] || return

  local target
  for target in "${@:1}"; do
    [ -n "$target" ] || continue
    declare -F "$target" >/dev/null && { [ ${overwrite:-0} -eq 1 ] || continue; }

    eval "${source/$1/$target}"     # alt: "function $target ${source#*\(\)}"
  done
}


declare -F rename_function >/dev/null ||
function rename_function() {
  copy_function "${1:?}" "${2:?}" && unset -f "$1"
}


declare -F runv >/dev/null ||
function runv() {
  # mimic 'set -x'

  >&2 printf "%s %s\n" `printf '%.0s+' {1..$SHLVL}` "$*"
  [ -n "$NOOP" ] || "$@"
}


function _continue() { RC=$?; [ -n "$CONTINUE" ] || return $RC; }


function join_string() {
  local quote=

  # escape whitespaces if no quote char. even delimiter is eligible (rare)
  [ -n "$quote" ] || set -- "${@// /\\ }"

  delim="${1:?}"; shift
  [ $# -ne 0 ] || return

  printf "${quote}%s${quote}" "$1"; shift
  printf "${delim}${quote}%s${quote}" "$@"

  # or process all but last and tack it on with ${@:1:$# -1}?
  # alternate implementation using just 'echo'
#    echo -n "${quote}$1${quote}"; shift
#    for elem in "$@"; do
#        echo -n "${delim}${quote}${elem}${quote}"
#    done
  echo
}


function join_quote() { quote=\' join_string "$@"; }


# function __parse_options() {
    # local option{,2} arg IFS='
# ,/|'
#FIXME this looks very odd.
# enforce --[no-][a-zA-Z]+=<value>, --[no-][a-zA-Z] <value>, --<flag> sets $flag=1,
# create a hash of options and values and any single dash are likewise treated as long
  # for arg in $1; do
    # case "$arg" in
      # ---*) break ;;
      # --?*) option="$arg"; break ;;
      # -?*)  [ -n "$option" ] || option="$arg" ;;
      # *)    break ;;
    # esac;
  # done
#  # [ -n "$option" ] || return 0
#
#   IFS='
# '
  # if [[ $option =~ (\[((no|dont)-?)\]). ]]; then
    # option2=${option/"${BASH_REMATCH[1]}"/}
    # option2=${option2%%[<{().[]*}
    # printf '%s\n' "${option2/=*/=}"
    # option=${option/"${BASH_REMATCH[1]}"/"${BASH_REMATCH[2]}"}
  # fi
  # option="${option%%[<{().[]*}"
  # printf '%s\n' "${option/=*/=}"
# }


function userinfo() {
  # analogous to /bin/usermod
  #while [ "${1+xxx}" ] && [[ "$1" =~ -* ]]; do
  local OPTIND
#  FIXME use getopts like a sane person!
  [[ "$1" =~ -* ]] && { flag=${1:1:1}; shift; }

#FIXME define a HASH for lookups instead of this crap
  case $flag in
    l)  field=1 ;;&
    u)  field=2 ;;&
    g)  field=3 ;;&
    d)  field=6 ;;&
    L)  field=lock ;&
    # TODO needs if/else
    p)  getent shadow ${1:-`id -u`} | awk -F: -v field=$field '{ print $2 }' ;;
    '') id -nu $1 ;;
    *)  getent passwd ${1:-`id -u`}
  esac
#  # login:x:uid:gid:gecos:home:shell
#  -c, --comment COMMENT         new value of the GECOS field
#  -d, --home HOME_DIR           new home directory for the user account
#  -e, --expiredate EXPIRE_DATE  set account expiration date to EXPIRE_DATE
#  -f, --inactive INACTIVE       set password inactive after expiration
#  -g, --gid GROUP               force use GROUP as new primary group
#  -G, --groups GROUPS           new list of supplementary GROUPS
#  -l, --login NEW_LOGIN         new value of the login name
#  -L, --lock                    lock the user account
#  -p, --password PASSWORD       use encrypted password for the new password
#  -s, --shell SHELL             new login shell for the user account
#  -u, --uid UID                 new UID for the user account
}


declare -F lstree >/dev/null ||
function lstree() {
  local OPTIND opt      # IMPORTANT !!
  local filter= type= reverse= flags=()
  local _find="find"    # alt: 'ls -R'

  while getopts ":hdlL:P:x" opt 2>/dev/null; do
    case "$opt" in
      d)    flags+=('-type d') ;;
      l)    _find+=" -L" ;;
      L)    flags+=("-maxdepth $OPTARG") ;;
      P)    flags+=("-name $OPTARG") ;;
      x)    flags+=('-xdev') ;;

      :)    RC=2 log_ERROR "missing argument to '-$OPTARG'"; return ;;
      \?)   RC=2 log_ERROR "unknown option '-$OPTARG'" ;&
      h|*)  >&2 cat <<_EOF
Usage: $FUNCNAME [ options ] <dir> [<dir> ...]
  A simple imitation of tree(1) - http://mama.indstate.edu/users/ice/tree/tree.1.html

  -d            list Directories only
  -l            follow symbolic links
  -L <level>    maximum traverse depth
  -P <pattern>  must escape any wildcards
  -x            stay on single filesystem
_EOF
            return ${RC:-2}
            ;;
    esac
  done
  shift $((OPTIND-1))

  while true; do
    ${DEBUG:+ runv} $_find ${1:-`pwd`} ${flags[@]} | sed -e '2,$ s/[^-][^\/]*\// |/g' -e 's/|\([^ ]\)/|-\1/'
    shift
    [ "${1:+x}" ] && echo || break
  done
}


declare -F min >/dev/null ||
function min() {
  local flag=() values=()

  while [ ${1+x} ]; do
    [[ $1 = -[a-zA-Z] ]] && flag+=($1) || {
        IFS=' ' read -a v <<< "$1"
        values+=( ${v[@]} )
      }
    shift
  done
  printf "%s\n" ${values[@]} | sort "${flag[@]}" | head -n 1
}


declare -F max >/dev/null ||
function max() { min -r "$@"; }
#  local flag
#
#  [[ $1 = -[a-zA-Z] ]] && { flag=$1; shift; }
#  printf "%s\n" "$@" | sort $flag | tail -n 1


declare -F keys >/dev/null ||
function keys() { local -n nref=$1; echo "${!nref[@]}"; }

declare -F values >/dev/null ||
function values() { local -n nref=$1; echo "${nref[@]}"; }

declare -F value >/dev/null ||
function value() { local -n nref=$1; echo "${nref[${2:?}]}"; }

#TODO
# array functions; push, pop, delete, replace, truncate

source ${BASH_SOURCE}_logging

# vim: expandtab:ts=4:sw=4
