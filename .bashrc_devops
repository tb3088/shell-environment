is_exec git && {
#--- BEGIN git ---

alias gsb='\git status --short --branch'
alias git.render="\git diff | sed -E 's/^[+ ]([^+]|$)/\1/; /^\-([^\-]+|$)/ d'"
alias git.diff_history='\git log -p --'
# undo unhelpful whitespace changes
#'\git diff --ignore-space-change --numstat | awk '$1 == 0 && $2 == 0 { print $NF }' | xargs git checkout HEAD --'

function __GIT() {
  ${DEBUG:+ runv GIT_TRACE=2} \git ${NOOP:+ --no-commit --no-ff} "$@"
}

function git.current() { __GIT branch | awk '$1 == "*" { print $2; exit; }'; }

function git.bulk_add() {
  [ $# -gt 0 ] || set -- M A D R
  while (( $# )); do
    __GIT add `git status --short | awk -v code=$1 '$1 ~ code { print $2 }'`
   shift
  done
}

function git.mirror() {
  local BRANCH interactive

  local OPTIND opt
  while getopts 'i' opt; do
    case "$opt" in
      i)    interactive=1 ;;
      :)    log.error "missing argument (-$OPTARG)"; return 2 ;;
      \?)   log.error "invalid option (-$OPTARG)" ; return 2 ;;
    esac
  done
  shift $((OPTIND-1))

  #TODO spit out 'git remotes' and prompt for src and dst with read()
  local src=${1:?source} dest=${2:?dest}; shift 2

  __GIT fetch --prune --prune-tags --force --multiple "$src" "$dest" || return
  echo

  # alt: uses local as intermediary and will DESTROY any updates present in $dst
  # git clone --mirror $src_url
  # (cd $src; git remote add $dst $dst_url; git push $dst --mirror; )

  local -a flags=( ${VERBOSE:+ '--progresss'} )
  [ -n "${VERBOSE+X}" ] || flags+=( '--quiet' )
  echo '----------'
  echo "process BRANCHES ..."
  echo
  for br in ${@:-`__GIT branch --list --remote "$src/${BRANCH:-*}"`}; do
    if [ ${interactive:-0} -eq 1 ]; then
      read -t 8 -n 1 -p "Copy '$br' [y/N]: " || return
      [ -z "${REPLY}" ] || echo
      [ "${REPLY^^}" = 'Y' ] || continue
    else
      echo "<< $br >>"
    fi
    __GIT push "${flags[@]}" "$dest" "${br}:refs/heads/${br#*/}"
    echo
  done

  echo '----------'
  echo "process TAGS ..."
  echo
  __GIT fetch "${flags[@]}" "$src" --tags
  __GIT push "$dest" --tags
}
#--- END git ---
}

# patterns to strip whitespace from code
#sed -i 's/[ \t]\+$//'  dangling EOL
#sed -i 's| {8}|\t|g'   spaces to tab
#sed -i 's| \{1,7\}\t|\t|g'  remove prepended spaces before tabs


is_exec python && {
#TODO convert to function that can process args and fallback to STDIN
alias yaml2json="python -c 'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.stdout, indent=4)'"
alias json2yaml="python -c 'import sys, yaml, json; yaml.dump(json.load(sys.stdin), sys.stdout, indent=2)'"
}


is_exec yq && {     #ref: https://github.com/mikefarah/yq
alias yaml2json='yq eval -j'
alias json2yaml='yq eval -P'
}


is_exec docker && {
alias docker.stats='docker ps -q | xargs  docker stats --no-stream'
}

is_exec jq && {
#--- BEGIN jq ---

# assumes delimited input with HEADER line and multi-row DATA
# ref: https://stackoverflow.com/questions/38860529/create-json-using-jq-from-pipe-separated-keys-and-values-in-bash
function csv2json() {
  local DELIM
  local output=$(
      __JQ --raw-input --null-input --arg delim "${DELIM:-,}" '
        ( input  | split($delim) ) as $keys |
        ( inputs | split($delim) ) as $vals |
        [ [$keys, $vals] | transpose[] | {(.[0]): .[1]} ] | add // empty
      '
    ) || return
    # alt:
    # [ [$keys, $vals] | transpose[] | {key: .[0], value: .[1]} ] | from_entries'

  __JQ --slurp 'map(.)' <<< "$output"
}

alias tsv2json="DELIM=$'\t' csv2json"
#--- END jq ---
}

for f in "${BASH_SOURCE/bashrc/functions}"; do
  [ -f "$f" ] || continue
  source "$f" || { log.error "RC=$? during $f"; return; }
done


# vim: expandtab:ts=4:sw=4
