
if which git &>/dev/null; then
  function git.current() {
     git branch 2>/dev/null | awk '$1 == "*" { print $2; exit; }'
  }

#  function git.diff-check() {
#    git diff --stat origin/$( git.current ) 2>/dev/null
#  }

  function git.mirror() {
    local src dst branch interactive

    local OPTIND opt
    while getopts 'i' opt; do
      case "$opt" in
        i)	interactive=1 ;;

      	:)  RC=2 log_ERROR "missing argument (-$OPTARG)"; return ;;
        \?) RC=2 log_ERROR "invalid option (-$OPTARG)" ; return ;;
      esac
    done
    shift $((OPTIND-1))

    : ${src:=${1:?}}
    : ${dst:=${2:?}}

    # alt: uses local as intermediary and will DESTROY any updates present in $dst
    # git clone --mirror $src_url
    # (cd $src; git remote add $dst $dst_url; git push $dst --mirror; )

    if [ ${interactive:-0} -eq 1 ]; then
      for br in `git branch --list --remote "$src/${branch:-*}" | grep -v --regexp='->'`; do
        read -t 8 -p "Copy BRANCH '${br#*/}' [y/N]:  " || return
        [ ${REPLY^^} = 'Y' ] && git push "$dst" "${br}:refs/heads/${br#*/}"
      done
    else
      ${DEBUG:+runv} git push "$dst" --all
    fi

    ${DEBUG:+runv} git push "$dst" --tags
    #alt: ... 'refs/tags/*:refs/tags/*'
  }

  alias gsb='git status -sb'
  alias gbl='git show-branch --all --list'
fi

alias yaml2json="python -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)'"
alias json2yaml="python -c 'import sys, yaml, json; yaml.dump(yaml.load(sys.stdin), sys.stdout, indent=4)'"

# vim: expandtab:ts=4:sw=4
