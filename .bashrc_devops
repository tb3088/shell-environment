is_exec git && {
  alias gsb='git status --short --branch'
  alias git.render="git diff | sed -E 's/^[+ ]([^+]|$)/\1/; /^\-([^\-]+|$)/ d'"
}
# patterns to strip whitespace from code
#sed -i 's/[ \t]\+$//'  dangling EOL
#sed -i 's| {8}|\t|g'   spaces to tab
#sed -i 's| \{1,7\}\t|\t|g'  remove prepended spaces before tabs

is_exec python && {
#TODO convert to function that can process args and fallback to STDIN
  alias yaml2json="python -c 'import sys, yaml, json; json.dump(yaml.safe_load(sys.stdin), sys.stdout, indent=4)'"
  alias json2yaml="python -c 'import sys, yaml, json; yaml.dump(json.load(sys.stdin), sys.stdout, indent=2)'"
}

is_exec yq && {     #ref: https://github.com/mikefarah/yq
  alias yaml2json='yq eval -j'
  alias json2yaml='yq eval -P'
}

is_exec docker && {
  alias docker.stats='docker ps -q | xargs  docker stats --no-stream'
}

is_exec jq && {
  # assumes delimited input with HEADER line and multi-row DATA
  # ref: https://stackoverflow.com/questions/38860529/create-json-using-jq-from-pipe-separated-keys-and-values-in-bash
  function csv2json() {
    local output=`
    jq --exit-status --raw-input --null-input --arg delim "${DELIM:-,}" '
        ( input  | split($delim) ) as $keys |
        ( inputs | split($delim) ) as $vals |
        [[ $keys, $vals ] | transpose[] | { (.[0]): .[1] }] | add // empty'` || return
    # alt:
    #   [ [$keys, $vals] | transpose[] | { key: .[0], value: .[1] } ] | from_entries'

    [ -n "$output" ] && jq --slurp 'map(.)' <<< "$output"
  }

  alias tsv2json="DELIM=$'\t' csv2json"
}

for f in "${BASH_SOURCE/bashrc/functions}"; do
  [ -f "$f" ] || continue
  source "$f" || echo >&2 "RC=$? during $f"
done

# vim: expandtab:ts=4:sw=4
